/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.basic;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.page.PageConst;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.UserInfo;
import com.optic.module.WhStorageInfo;
import com.optic.module.WhTypeInfo;
import com.optic.module.json.WHTypeJson;
import com.optic.service.UserInfoManager;
import com.optic.service.WhStorageInfoManager;
import com.optic.service.WhTypeInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.MD5;
import com.optic.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-05-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class BasicInfoAction extends DispatchAction {
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	//获取session中的用户身份信息
	private String getDepName(HttpServletRequest request){
		String userDepName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_DEP_NAME);
		return userDepName;
	}
	
	/**
	 * 修改个人密码
	 * @description
	 * @author wm
	 * @date 2017-4-11 上午10:50:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updatePass(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		UserInfoManager um = (UserInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		Integer userId = this.getUserID(request);
		String oldPass = String.valueOf(request.getParameter("oldPass"));
		String newPass = String.valueOf(request.getParameter("newPass"));
		MD5 md5 = new MD5();
		String msg = "";
		//step_1:先判断旧密码是否正确
		List<UserInfo> uList = um.listInfoById(userId);
		if(uList.size() > 0){
			if(uList.get(0).getUserPassword().equalsIgnoreCase(md5.calcMD5(oldPass))){
				//修改用户密码
				boolean updateFlag = um.updateNewPass(userId, newPass);
				if(updateFlag){
					msg = "succ";//修改成功
				}else{
					msg = "fail";//修改失败
				}
			}else{
				msg = "noMatch";//旧密码不匹配
			}
		}else{
			msg = "notExist";//不存在该用户
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 产品类别页面
	 * @description
	 * @author wm
	 * @date 2017-4-5 上午10:54:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goProCategoryPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("proCategory");
	}
	
	/**
	 * 产品页面
	 * @description
	 * @author wm
	 * @date 2017-4-5 上午10:54:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goProPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("product");
	}
	
	/**
	 * 往来单位页面
	 * @description
	 * @author wm
	 * @date 2017-4-5 上午10:55:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goBusinessPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("business");
	}
	
	/**
	 * 获取单位类别列表
	 * @description
	 * @author wm
	 * @date 2017-4-5 下午03:23:31
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBusinessTypeList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		return null;
	}
	
	/**
	 * 仓库货架页面
	 * @description
	 * @author wm
	 * @date 2017-4-5 上午10:56:27
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goWHStoragePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		return mapping.findForward("storage");
	}
	
	/**
	 * 获取仓库类别列表
	 * @description
	 * @author wm
	 * @date 2017-4-5 下午03:38:14
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getWHSTypeList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhTypeInfoManager whtm = (WhTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_TYPE_INFO);
		List<WhTypeInfo> whtList = whtm.listAllInfo();
		List<WhTypeInfo> result = new WHTypeJson().getWHTypeJson(whtList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("wtList", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 修改指定仓库类别
	 * @description
	 * @author wm
	 * @date 2017-4-6 上午10:24:48
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateWHType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhTypeInfoManager whtm = (WhTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_TYPE_INFO);
		String depName = this.getDepName(request);
		String msg = "";
		Map<String,String> map = new HashMap<String,String>();
		if(depName.equals("库房")){//只有库房有此权限
			Integer whId = CommonTools.getFinalInteger(request.getParameter("whId"));
			String whName = Transcode.unescape(request.getParameter("whName"), request);
			String whRemark = Transcode.unescape(request.getParameter("whRemark"), request);
			boolean upFlag = whtm.updateWTI(whId, whName, whRemark);
			if(upFlag){
				msg = "succ";
			}else{
				msg = "fail";
			}
		}else{
			msg = "noAbility";//无此操作权限
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	public ActionForward addWHType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhTypeInfoManager whtm = (WhTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_TYPE_INFO);
		String depName = this.getDepName(request);
		String msg = "";
		Map<String,String> map = new HashMap<String,String>();
		if(depName.equals("库房")){//只有库房有此权限
			String whName = Transcode.unescape(request.getParameter("whName"), request);
			String whRemark = Transcode.unescape(request.getParameter("whRemark"), request);
			Integer whId = whtm.addWTI(whName, whRemark);
			if(whId > 0){
				msg = "succ";
			}else{
				msg = "fail";
			}
		}else{
			msg = "noAbility";//无此操作权限
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 分页获取仓库货架列表
	 * @description
	 * @author wm
	 * @date 2017-4-5 下午03:46:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getWHSList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhStorageInfoManager whsm = (WhStorageInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_STORAGE_INFO);
		Integer whId = CommonTools.getFinalInteger(request.getParameter("whId"));
		String whsName = Transcode.unescape(request.getParameter("whsName"), request);
		Integer count = whsm.getCountByOption(whId, whsName);
//		获取所有信息
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = whsm.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);		
		List<WhStorageInfo> whsList = whsm.listPageInfoByOption(whId, whsName, pageNo, pageSize);
//		List<WhStorageInfo> whsList = whsm.listAllInfoByTypeId(whId);
		List<WhStorageInfo> result = new  WHTypeJson().getWHSJson(whsList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("wsList", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取仓库货架数量
	 * @description
	 * @author wm
	 * @date 2017-4-6 下午04:15:40
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getWHSCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhStorageInfoManager whsm = (WhStorageInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_STORAGE_INFO);
		Integer whId = CommonTools.getFinalInteger(request.getParameter("whId"));
		String whsName = Transcode.unescape(request.getParameter("whsName"), request);
		Integer count = whsm.getCountByOption(whId, whsName);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 增加仓库货架
	 * @description
	 * @author wm
	 * @date 2017-4-6 下午02:35:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addWHS(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhStorageInfoManager whsm = (WhStorageInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_STORAGE_INFO);
		String depName = this.getDepName(request);
		String msg = "";
		Map<String,String> map = new HashMap<String,String>();
		if(depName.equals("库房")){//只有库房有此权限
			String whsName = Transcode.unescape(request.getParameter("whsName"), request);
			Integer whId = CommonTools.getFinalInteger(request.getParameter("whId"));
			String whsRemark = Transcode.unescape(request.getParameter(""), request);
			boolean flag = whsm.checkExistFlagByWhsName(whId,whsName);
			if(flag){//存在记录
				msg = "exist";
			}else{
				Integer whsId = whsm.addWSI(whsName, whId, whsRemark);
				if(whsId > 0){
					msg = "succ";
				}else{
					msg = "fail";
				}
			}
		}else{
			msg = "noAbility";//无此操作权限
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据货架编号获取货架详细信息
	 * @description
	 * @author wm
	 * @date 2017-4-8 上午11:37:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getWHSDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhStorageInfoManager whsm = (WhStorageInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_STORAGE_INFO);
		Map<String,Object> map = new HashMap<String,Object>();
		Integer whsId = CommonTools.getFinalInteger(request.getParameter("whsId"));//货架编号
		List<WhStorageInfo> whsList = whsm.listDetailInfoById(whsId);
		List<WhStorageInfo> result = new WHTypeJson().getWHSJson(whsList);
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 修改指定仓库货架
	 * @description
	 * @author wm
	 * @date 2017-4-9 上午11:07:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateWHS(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		WhStorageInfoManager whsm = (WhStorageInfoManager) AppFactory.instance(null).getApp(Constants.WEB_WH_STORAGE_INFO);
		String depName = this.getDepName(request);
		String msg = "";
		Map<String,String> map = new HashMap<String,String>();
		boolean existFlag = false;
		if(depName.equals("库房")){//只有库房有此权限
			Integer whsId = CommonTools.getFinalInteger(request.getParameter("whsId"));
			String whsName = Transcode.unescape(request.getParameter("whsName"), request);
			Integer whId = CommonTools.getFinalInteger(request.getParameter("whId"));
			String whsRemark = Transcode.unescape(request.getParameter("whsRemark"), request);
			List<WhStorageInfo> whsList = whsm.listDetailInfoById(whsId);
			if(whsList.get(0).getWhsName().equals(whsName) && whsList.get(0).getWhTypeInfo().getId().equals(whId)){
				//当货架名称和仓库类别都相同时不需要进行存在记录判断
			}else{
				existFlag = whsm.checkExistFlagByWhsName(whId,whsName);
			}
			if(existFlag){//存在记录
				msg = "exist";
			}else{
				boolean upFlag = whsm.updateWSI(whsId, whsName, whId, whsRemark);
				if(upFlag){
					msg = "succ";
				}else{
					msg = "fail";
				}
			}
		}else{
			msg = "noAbility";//无此操作权限
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
}