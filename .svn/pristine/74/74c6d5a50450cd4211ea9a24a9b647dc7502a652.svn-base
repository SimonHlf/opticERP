/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.proloss;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.factory.AppFactory;
import com.optic.module.InStoreSubInfo;
import com.optic.module.PLossInfo;
import com.optic.module.PLossSubInfo;
import com.optic.module.json.PLossJson;
import com.optic.page.PageConst;
import com.optic.service.InstoreSubInfoManager;
import com.optic.service.PLossInfoManager;
import com.optic.service.PLossSubInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-19-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ProLossAction extends DispatchAction {
	
	/**
	 * 导向材料损耗页面
	 * @description
	 * @author wm
	 * @date 2017-6-21 上午09:11:08
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goProLossPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("proLossPage");
	}
	
	/**
	 * 根据条件获取材料损耗记录条数
	 * @description
	 * @author wm
	 * @date 2017-6-21 上午09:11:46
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getProLossCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PLossInfoManager plsm = (PLossInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_INFO);
		String proNo = String.valueOf(request.getParameter("proName"));//材料编号
		String sDate = String.valueOf(request.getParameter("sDate"));//材料编号
		String eDate = String.valueOf(request.getParameter("eDate"));//材料编号
		Integer comStatus = Integer.parseInt(request.getParameter("status"));//完结状态
		Integer count = plsm.getCountByOption(proNo, sDate, eDate, comStatus);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据条件分页获取材料损耗记录列表
	 * @description
	 * @author wm
	 * @date 2017-6-22 上午10:29:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getProLossList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PLossInfoManager plsm = (PLossInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_INFO);
		String proNo = String.valueOf(request.getParameter("proName"));//材料编号
		String sDate = String.valueOf(request.getParameter("sDate"));//材料编号
		String eDate = String.valueOf(request.getParameter("eDate"));//材料编号
		Integer comStatus = Integer.parseInt(request.getParameter("status"));//完结状态
		Integer count = plsm.getCountByOption(proNo, sDate, eDate, comStatus);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);	
		List<PLossInfo> plList = plsm.listPageInfoByOption(proNo, sDate, eDate, comStatus, pageNo, pageSize);
		List<PLossInfo> result = new PLossJson().getPLJson(plList);
		Map<String,Object> map  = new HashMap<String,Object>();
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取指定加工部门、指定材料损耗编号下的加工数量（总计）+ 损耗（总计）
	 * @description
	 * @author wm
	 * @date 2017-6-26 下午03:58:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getCurrTotalMadeNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PLossInfoManager plm = (PLossInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_INFO);
		PLossSubInfoManager plsm = (PLossSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_SUB_INFO);
		Integer plId = Integer.parseInt(request.getParameter("plId"));//材料损耗主表编号
		Integer depId = Integer.parseInt(request.getParameter("depId"));//加工工序部门编号
		List<PLossInfo> plList = plm.listInfoById(plId);
		List<PLossSubInfo> plsList = plsm.listInfoByOption(plId, depId);
		Integer madeNum_total = 0;//个人加工数量总计
		Integer batch_num = plList.get(0).getComNum();//加工完品数量总计
		if(plsList.size() > 0){
			for(Iterator<PLossSubInfo> it = plsList.iterator() ; it.hasNext();){
				PLossSubInfo pls = it.next();
				madeNum_total = pls.getComNumber() + pls.getLossNumber();
			}
		}
		Integer validMadeNum = batch_num - madeNum_total;//当前部门剩余可加工的数量
		Map<String,Integer> map  = new HashMap<String,Integer>();
		map.put("result", validMadeNum);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();
        pw.close(); 
 		return null;
	}
	
	/**
	 * 增加材料损耗子表信息
	 * @description
	 * @author wm
	 * @date 2017-6-24 上午10:48:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addProLossSubInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PLossInfoManager plm = (PLossInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_INFO);
		PLossSubInfoManager plsm = (PLossSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_SUB_INFO);
		InstoreSubInfoManager issm = (InstoreSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_SUB_INFO);
		Integer issId = Integer.parseInt(request.getParameter("issId"));//入库子表主键编号
		Integer plId = Integer.parseInt(request.getParameter("plId"));//材料损耗主表编号
		Integer depId = Integer.parseInt(request.getParameter("depId"));//加工工序部门编号
		Integer madeNum = Integer.parseInt(request.getParameter("madeNum"));//加工数量
		Integer comNum = Integer.parseInt(request.getParameter("comNum"));//完品数量
		String msg = "error";
		Integer lossNum_total = 0;
		Integer matchNum_total = 0;
		boolean flag = false;
		//增加材料损耗子表数据
		Integer plsId = plsm.addPLS(plId, depId, madeNum, comNum, CurrentTime.getCurrentTime1(), "", "");
		if(plsId > 0){
			//第一道加工工序时，修改进货子表的剩余加工数量
			if(depId.equals(6)){
				flag = issm.updateRemainNumById(issId, madeNum);
				if(flag){
					flag = plm.updatePLById(plId, 0, madeNum - comNum, 0);//只修改损品数量
					msg = "succ";
				}
			}else if(depId.equals(14)){//当前为出货检时，需要判断当前物料是否完结
				//修改主表的完品数量、损耗数量、完品率(只有出货检时才修改)
				flag = plm.updatePLById(plId, comNum, madeNum - comNum, 0);
				if(flag){
					List<PLossInfo> plList = plm.listInfoById(plId);
					if(plList.size() > 0){
						PLossInfo pl = plList.get(0);
						matchNum_total = pl.getMatchNum();//加工数量（总）
						lossNum_total = pl.getLossNum();//损耗数量

						Integer comNum_all_chj = 0;//出货检的完品总数量
						List<PLossSubInfo> plsList = plsm.listInfoByOption(plId, depId);
						for(Iterator<PLossSubInfo> it = plsList.iterator() ; it.hasNext();){
							PLossSubInfo pls = it.next();
							comNum_all_chj += pls.getComNumber();
						}
						if((comNum_all_chj + lossNum_total) == matchNum_total){//当出货检的完品数量+所有工序的损耗等于加工数量时，表示完结
							//修改材料损耗完结状态
							flag = plm.updatePLById(plId, 0, 0, 1);
							if(flag){
								msg = "complete";//材料加工完结
							}
						}else{
							msg = "succ";
						}
					}
				}	
			}else{//其他工序
				flag = plm.updatePLById(plId, 0, madeNum - comNum, 0);//只修改损品数量
				msg = "succ";
			}
		}
		Map<String,String> map  = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据入库子表编号获取该批次的货物的加工剩余数量
	 * @description
	 * @author wm
	 * @date 2017-6-23 下午04:27:54
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInStoreRemainNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		InstoreSubInfoManager issm = (InstoreSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_SUB_INFO);
		Integer issId = CommonTools.getFinalInteger(request.getParameter("issId"));
		List<InStoreSubInfo> issList = issm.listInfoByIssId(issId);
		Integer count = 0;
		if(issList.size() > 0){
			count = issList.get(0).getRemainNum();//加工剩余数量
		}
		Map<String,Integer> map  = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取材料损耗详情
	 * @description
	 * @author wm
	 * @date 2017-6-27 上午11:02:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLossDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PLossSubInfoManager plsm = (PLossSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_SUB_INFO);
		String optionStr = request.getParameter("optionStr");//data:数据，chart：图标
		Integer plId = Integer.parseInt(request.getParameter("plId"));//材料损耗主键
		List<Object> plsList = plsm.listGoroupInfoByPlId(plId);
		if(optionStr.equals("data")){
			
		}else if(optionStr.equals("chart")){
			
		}
		Map<String,Object> map  = new HashMap<String,Object>();
		map.put("result", plsList);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
}