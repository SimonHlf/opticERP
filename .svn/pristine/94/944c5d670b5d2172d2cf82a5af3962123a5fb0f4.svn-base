/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.bizContact;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.BusinessContactInfo;
import com.optic.module.BusinessTypeInfo;
import com.optic.module.json.BusinessContactInfoJson;
import com.optic.module.json.BusinessTypeInfoJson;
import com.optic.page.PageConst;
import com.optic.service.BusinessContactInfoManager;
import com.optic.service.BusinessTypeInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.util.Constants;


public class BizcontactAction extends DispatchAction {
	
	//添加往来单位类别
	public ActionForward addBizType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessTypeInfoManager bizTypeManager = (BusinessTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_TYPE_INFO);
	    String btName = Transcode.unescape(request.getParameter("btName"), request);
	    String btRemark = Transcode.unescape(request.getParameter("btRemark"), request);
	    Integer bizType =  bizTypeManager.addBusinessTypeInfo(btName, btRemark);
	    String json = JSON.toJSONString(bizType>0?true:false);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//更新往来单位类别
	public ActionForward updateBizType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessTypeInfoManager bizTypeManager = (BusinessTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_TYPE_INFO);
	    Integer btID = Integer.parseInt(request.getParameter("btID"));
	    String btName = Transcode.unescape(request.getParameter("btName"), request);
	    String btRemark = Transcode.unescape(request.getParameter("btRemark"), request);
	    boolean bizTypeFlag =  bizTypeManager.updateBusinessTypeInfo(btID, btName, btRemark);
	    String json = JSON.toJSONString(bizTypeFlag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//获取往来单位类别
	public ActionForward listBizType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessTypeInfoManager bizTypeManager = (BusinessTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_TYPE_INFO);
	    List<BusinessTypeInfo> bizType =  bizTypeManager.listBusinessTypeInfo();
	    List<BusinessTypeInfo> bizTypeJson = new BusinessTypeInfoJson().getBizTypeJson(bizType);
	    String json = JSON.toJSONString(bizTypeJson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//添加往来单位
	public ActionForward addBizContact(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessContactInfoManager bizContactManager = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    String bcName = Transcode.unescape(request.getParameter("bcName"), request);
	    String bcPy = Transcode.unescape(request.getParameter("bcPy"), request);
		String bcAddress = Transcode.unescape(request.getParameter("bcAddress"), request);
		String bcContact = Transcode.unescape(request.getParameter("bcContact"), request);
		String bcTel = request.getParameter("bcTel");
		String bcMobile = request.getParameter("bcMobile");
		String bcFax = request.getParameter("bcFax");
		String bcEmail = request.getParameter("bcEmail");
		String bcBankName = Transcode.unescape(request.getParameter("bcBankName"), request);
		String bcBankInfo = null;
		String bcBankNo = request.getParameter("bcBankNo");
		String bcBankUser =null;
		Integer bcTypeID = Integer.parseInt(request.getParameter("bcTypeID"));
		Integer bizContact =  bizContactManager.addBusinessContactInfo(bcName,bcTypeID, bcPy, bcAddress, bcContact, bcTel, bcMobile, bcFax, bcEmail, bcBankName, bcBankInfo, bcBankNo, bcBankUser);
	    String json = JSON.toJSONString(bizContact>0?true:false);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//获取往来单位
	public ActionForward listBizContact(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		 BusinessContactInfoManager bizContactManager = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    List<BusinessContactInfo> bizContact =  bizContactManager.listBusinessContactInfo(0, "", 1, 10);
	    List<BusinessContactInfo> bizContactJson =  new BusinessContactInfoJson().getBtJson(bizContact);
	    String json = JSON.toJSONString(bizContactJson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	/**
	 * 根据条件分页获取往来单位
	 * @description
	 * @author wm
	 * @date 2017-4-24 上午09:28:23
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPageBizContact(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BusinessContactInfoManager cm = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
		Integer typeId_c = CommonTools.getFinalInteger(request.getParameter("typeId_c"));//往来单位类别
		String py_c = String.valueOf(request.getParameter("py_c"));//往来单位拼音码
		if(py_c.equals("null")){
			py_c = "";
		}
		Integer count = cm.getCountByOption(typeId_c, py_c);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);
	    List<BusinessContactInfo> bizContact =  cm.listBusinessContactInfo(typeId_c, py_c, pageNo, pageSize);
	    List<BusinessContactInfo> bizContactJson =  new BusinessContactInfoJson().getBtJson(bizContact);
	    Map<String,Object> map = new HashMap<String,Object>();
	    map.put("result", bizContactJson);
	    String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据条件获取往来单位数量
	 * @description
	 * @author wm
	 * @date 2017-4-24 上午10:11:15
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getBizContactCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BusinessContactInfoManager cm = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
		Integer typeId_c = CommonTools.getFinalInteger(request.getParameter("typeId_c"));//往来单位类别
		String py_c = String.valueOf(request.getParameter("py_c"));//往来单位拼音码
		if(py_c.equals("null")){
			py_c = "";
		}
		Integer count = cm.getCountByOption(typeId_c, py_c);
	    Map<String,Integer> map = new HashMap<String,Integer>();
	    map.put("result", count);
	    String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	public ActionForward getPinyinCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		String bcName = Transcode.unescape(request.getParameter("bcName"), request);
		String bcPy =  Convert.getFirstSpell(bcName);
	    String json = JSON.toJSONString(bcPy);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//获取往来单位记录数
	public ActionForward listBizContactCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		 BusinessContactInfoManager bizContactManager = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    Integer bizCount =  bizContactManager.getCountByOption(0, "");
	    String json = JSON.toJSONString(bizCount);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据往来单位类别名称查询是否存在(存在返回true)
	 * @description
	 * @author wm
	 * @date 2017-5-2 下午02:45:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistBtInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BusinessTypeInfoManager btm = (BusinessTypeInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_TYPE_INFO);
		String btName =  Transcode.unescape(request.getParameter("btName"),request);
		List<BusinessTypeInfo> btList = btm.listByInfo(btName);
		boolean existFlag = false;
		if(btList.size() > 0){
			existFlag = true;
		}
	    Map<String,Boolean> map = new HashMap<String,Boolean>();
	    map.put("result", existFlag);
	    String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 检查往来单位是否存在(存在返回true)
	 * @description
	 * @author wm
	 * @date 2017-5-2 下午03:04:10
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistBsInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		BusinessContactInfoManager bcm = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
		String bcName = Transcode.unescape(request.getParameter("bcName"), request);
		List<BusinessContactInfo> btList = bcm.listInfoByName(bcName);
		boolean existFlag = false;
		if(btList.size() > 0){
			existFlag = true;
		}
	    Map<String,Boolean> map = new HashMap<String,Boolean>();
	    map.put("result", existFlag);
	    String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//根据指定编号获取往来单位
	public ActionForward listBizContactById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		 BusinessContactInfoManager bizContactManager = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    Integer bcId = Integer.parseInt(request.getParameter("bcId"));
		List<BusinessContactInfo> bizContact =  bizContactManager.listBcInfoByOption(bcId );
	    List<BusinessContactInfo> bizContactJson =  new BusinessContactInfoJson().getBtJson(bizContact);
	    String json = JSON.toJSONString(bizContactJson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//更新指定的产品信息
	public ActionForward updateBizContact(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessContactInfoManager bizContactManager = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    Integer bcId = Integer.parseInt(request.getParameter("bcId"));
	    String bcName = Transcode.unescape(request.getParameter("bcName"), request);
	    String bcPy = Transcode.unescape(request.getParameter("bcPy"), request);
		String bcAddress = Transcode.unescape(request.getParameter("bcAddress"), request);
		String bcContact = Transcode.unescape(request.getParameter("bcContact"), request);
		String bcTel = request.getParameter("bcTel");
		String bcMobile = request.getParameter("bcMobile");
		String bcFax = request.getParameter("bcFax");
		String bcEmail = request.getParameter("bcEmail");
		String bcBankName = Transcode.unescape(request.getParameter("bcBankName"), request);
		String bcBankInfo = null;
		String bcBankNo = request.getParameter("bcBankNo");
		String bcBankUser =null;
		Integer bcTypeID = Integer.parseInt(request.getParameter("bcTypeID"));
		boolean bizFlag =  bizContactManager.updateBusinessContactInfo(bcId,bcTypeID,bcName, bcPy, bcAddress, bcContact, bcTel, bcMobile, bcFax, bcEmail, bcBankName, bcBankInfo, bcBankNo, bcBankUser);
		String json = JSON.toJSONString(bizFlag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取采购人员外出采购的专用公司
	 * @description
	 * @author wm
	 * @date 2017-6-9 下午03:22:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getSpecBc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	    BusinessContactInfoManager bcm = (BusinessContactInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUSINESS_CONTACT_INFO);
	    Integer bcType = Integer.parseInt(request.getParameter("bcType"));
	    List<BusinessContactInfo> bcList = bcm.listSpecInfo(bcType);
	    List<BusinessContactInfo> result =  new BusinessContactInfoJson().getBtJson(bcList);
	    Map<String,Object> map = new HashMap<String,Object>();
	    map.put("result", result);
	    String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
	    return null;
	}
}