/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.outstore;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.Region;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.InStoreSubInfo;
import com.optic.module.OutInfo;
import com.optic.module.OutSellInfo;
import com.optic.module.OutSubInfo;
import com.optic.module.PLossInfo;
import com.optic.module.ProductInfo;
import com.optic.module.json.OutInfoJson;
import com.optic.module.json.OutSellInfoJson;
import com.optic.page.PageConst;
import com.optic.service.InstoreSubInfoManager;
import com.optic.service.OutInfoManager;
import com.optic.service.OutSellInfoManager;
import com.optic.service.OutSellSubInfoManager;
import com.optic.service.OutSubInfoManager;
import com.optic.service.PLossInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;
import com.optic.util.WebUrl;

/** 
 * MyEclipse Struts
 * Creation date: 04-19-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OutstoreAction extends DispatchAction {
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
    //获取Session中的用户名
	private String getuserName(HttpServletRequest request){
		String userName = (String) request.getSession(false).getAttribute(Constants.LOGIN_REAL_NAME);
		return userName;
	}
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	/* 领料出库 */
	public ActionForward goPickingOutStore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String eTime = CurrentTime.getStringDate();
		String sTime = CurrentTime.getFinalDate(eTime, -2);
		request.setAttribute("sTime", sTime);
		request.setAttribute("eTime", eTime);
		return mapping.findForward("pickingOutStore");
	}
	//添加出库单信息
	public ActionForward addOutStore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		OutSubInfoManager osiManager = (OutSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SUB_INFO);
		ProductInfoManager pm = (ProductInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		PLossInfoManager plm = (PLossInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_LOSS_INFO);
		InstoreSubInfoManager issm = (InstoreSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_SUB_INFO);
		Integer oiUserId = this.getUserID(request);//出库人编号
		Timestamp applyDate = CurrentTime.getCurrentTime1();//出库制单日期
		String oNo = String.valueOf(request.getParameter("oNo"));//出库单编号
		Integer otSta = CommonTools.getFinalInteger(request.getParameter("otSta"));//领料状态
		String comStr = String.valueOf(request.getParameter("comStr")); //材料编号+出库量
		String appUser = String.valueOf(request.getParameter("appUser")); //申请人
		String newMadeCode = String.valueOf(request.getParameter("newMadeCode"));//加工材料完成后形成的新产品编码
		String remark = String.valueOf(request.getParameter("remark")); //备注
		String[] comArray = comStr.split(":");
		boolean flag = false;
		Integer oiID = oiManager.addOutInfo(oiUserId, 1, oNo, appUser, applyDate, otSta, remark);
		if(comArray.length > 0&& oiID>0){
			Integer num = comArray[0].split(",").length;
			for(Integer i = 0 ; i < num ; i++){
				Integer pId = Integer.parseInt(comArray[0].split(",")[i]);//材料编号
				Integer pNum = Integer.parseInt(comArray[1].split(",")[i]);//出库量
				List<OutSubInfo> osList = osiManager.getListByBatch(pId);
				String batchNo="0";
				String[] batchNoArray;
				if(!otSta.equals(0)){
					if(osList.size()>0){
						batchNo=osList.get(0).getBatchNo();
						batchNoArray =batchNo.split("-");
						Integer bNO= Integer.parseInt(batchNoArray[1])+1;
						batchNo =batchNoArray[0]+"-"+bNO;
					}else{
						batchNo=CurrentTime.getSimpleTime()+"-"+1;
					}
					
				}
				Integer osiId=osiManager.addOutSubInfo(oiID,pId , pNum,batchNo);
				if(osiId>0){
					flag = pm.updateProNumber(pId, -pNum, -pNum);
					
					//2017-06-29日增加加工领料出库时判断是否增加材料损耗信息初始记录。by wm
					if(flag && otSta.equals(1)){
						Integer proNewId = 0;//材料加工后形成的新产品编号
						//增加新产品信息
						List<ProductInfo> proInfo = pm.listProInfo(pId);
						if(proInfo.size() > 0){
							ProductInfo pro = proInfo.get(0);
							proNewId = pm.addProductInfo(newMadeCode, pro.getProductTypeInfo().getId(), pro.getProName(), pro.getProPy(), 
									pro.getProSpec(), pro.getProCz(), pro.getProUnit(), "m", 0d, 0d, 0d, 0, 0, "由"+pro.getProNo()+"加工成", 19);
						}
						
						//加工领料出库，需要增加材料损耗信息
						//根据材料编号获取未完结状态的材料损耗信息
						List<PLossInfo> plList = plm.listUnComInfoByProId(pId);
						if(plList.size() > 0){
							//说明当前材料存在未完结加工状态，不需要增加材料损耗记录
						}else{
							//不存在时需要增加材料损耗记录
							//根据材料编号获取库存录入信息子表中remainNum=inNumber(表示当前为第一次领料加工)
							List<InStoreSubInfo> issList = issm.listInfoByProId(pId);
							if(issList.size() > 0){//存在记录才能进行增加材料损耗信息
								InStoreSubInfo iss = issList.get(0);
								plm.addPL(iss.getId(), pId, proNewId, CurrentTime.getCurrentTime1(), iss.getBatchNo(), iss.getInNumber());
							}
						}
						
					}
				}
			}
		}
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
   }
	//列出出库单信息
	public ActionForward listOutStore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		
		String o_no = request.getParameter("o_no");
		Integer proid =Integer.parseInt(request.getParameter("proid"));
		Integer o_sta= Integer.parseInt(request.getParameter("o_sta"));
		String sDate = request.getParameter("sDate");
		String eDate = request.getParameter("eDate");
		String eTime = CurrentTime.getStringDate();
		if(sDate==null){
			sDate=CurrentTime.getFinalDate(eTime, -2);
		}
		if(eDate==null){
			eDate=eTime;
		}
		Integer count = oiManager.getOiCount(o_no, proid, o_sta, sDate, eDate);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);
		
		List<OutInfo> oiList = oiManager.getOiList(o_no, proid, o_sta, sDate, eDate, pageNo, pageSize);
		List<OutInfoJson> oiJson = new OutInfoJson().getOiJson(oiList);
		String json = JSON.toJSONString(oiJson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
   }
	//生成新的出库单编号
	public ActionForward genoNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		List<OutInfo> oiList = oiManager.getLastInfo();
		String insNo_final = "";
		if(oiList.size() > 0){
			insNo_final = CommonTools.getInStoreNo(oiList.get(0).getOutNo());
		}
		String json = JSON.toJSONString(insNo_final);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
   }
	/* 销售出库 外协加工出库 */
	public ActionForward goSellOut(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		Integer option = Integer.parseInt(request.getParameter("option"));//出库方式
		String eTime = CurrentTime.getStringDate();
		String sTime = CurrentTime.getFinalDate(eTime, -2);
		request.setAttribute("sTime", sTime);
		request.setAttribute("eTime", eTime);
		request.setAttribute("option", option);
		return mapping.findForward("sellOut");
	}
	
	/**
	 * 添加销售出库
	 * @description
	 * @author wm
	 * @date 2017-6-6 下午03:36:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addSellOut (ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		OutSellSubInfoManager ossManager = (OutSellSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_SUB_INFO);
		ProductInfoManager pm = (ProductInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String posStr = request.getParameter("posStr");//出库详情
		//String osNo = request.getParameter("outNo");//出库单号
		Integer bcId =Integer.parseInt(request.getParameter("bId")); //往来单位编号
		String contactName =Transcode.unescape(request.getParameter("bUserName"), request);  //客户姓名
		Double allPrice =Double.parseDouble(request.getParameter("aPrice")); //合同总价
		Integer outStatus = 0;//标记状态(0:未完成，1:完成)
		Integer outType = Integer.parseInt(request.getParameter("oType"));//出库类型（销售出库，加工出库）
		Timestamp outDate = CurrentTime.getCurrentTime1();//出库制单日期
		Integer outUserId = null;//出库人编号
		String outUserName ="";//出库人 真实姓名
		//String expNo = request.getParameter("expNo");//快递单号
		Integer osID = oSManager.addOS("", bcId, contactName, allPrice, outStatus, outType, outDate, outUserId, outUserName, "");
		String[] comArray = posStr.split(":");
		boolean flag = false;
		if(comArray.length>0 && osID > 0){
			Integer num = comArray[0].split(",").length;
			for(Integer i = 0 ; i < num ; i++){
				Integer proID =Integer.parseInt(comArray[0].split(",")[i]);//商品编号
				Double proPrice =Double.parseDouble(comArray[1].split(",")[i]);//单价
				Integer proNum =Integer.parseInt(comArray[2].split(",")[i]);//出库数量
				Double totalPrice =Double.parseDouble(comArray[3].split(",")[i]);//总价 
				Integer ossID = ossManager.addOSS(osID, proID, proNum, proPrice, totalPrice);
				if(ossID>0){
					 flag = pm.updateProNumber(proID, -proNum, -proNum);
				}
			}
		}
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	//列出出库单信息
	public ActionForward listOutStoreCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		
		String o_no = request.getParameter("o_no");
		Integer proid =Integer.parseInt(request.getParameter("proid"));
		Integer o_sta= Integer.parseInt(request.getParameter("o_sta"));
		String sDate = request.getParameter("sDate");
		String eDate = request.getParameter("eDate");
		String eTime = CurrentTime.getStringDate();
		if(sDate==null){
			sDate=CurrentTime.getFinalDate(eTime, -2);
		}
		if(eDate==null){
			eDate=eTime;
		}
		Integer count = oiManager.getOiCount(o_no, proid, o_sta, sDate, eDate);
		String json = JSON.toJSONString(count);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	//列出销售，外协加工出库单
	public ActionForward listOutSellInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		String osNo = request.getParameter("osNo");//出库单编号
		String sDate = request.getParameter("sDate");//出库单开始时间
		String eDate = request.getParameter("eDate");//出库单结束时间
		Integer o_sta = Integer.parseInt(request.getParameter("o_sta"));
		Integer bc_id = Integer.parseInt(request.getParameter("bid"));
		Integer oType = Integer.parseInt(request.getParameter("oType"));
		String eTime = CurrentTime.getStringDate();
		if(sDate==""){
			sDate=CurrentTime.getFinalDate(eTime, -2);
		}
		if(eDate==""){
			eDate=eTime;
		}
		Integer count = oSManager.getCountByOption(osNo, bc_id, o_sta, oType, sDate, eDate, osNo);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);
		List<OutSellInfo> osList = oSManager.listPageInfoByOption(osNo, bc_id, o_sta, oType, sDate, eDate, osNo, pageNo, pageSize);
		List<OutSellInfoJson> osJson = new OutSellInfoJson().getOsJson(osList);
		String json = JSON.toJSONString(osJson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	//列出销售，外协加工出库单总几率
	public ActionForward  outSellCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		String osNo = request.getParameter("osNo");//出库单编号
		String sDate = request.getParameter("sDate");//出库单开始时间
		String eDate = request.getParameter("eDate");//出库单结束时间
		Integer o_sta = Integer.parseInt(request.getParameter("o_sta"));
		Integer bc_id = Integer.parseInt(request.getParameter("bid"));
		Integer oType = Integer.parseInt(request.getParameter("oType"));
		Integer count = oSManager.getCountByOption(osNo, bc_id, o_sta, oType, sDate, eDate, osNo);
		String json = JSON.toJSONString(count);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	//更新出库单
	public ActionForward  updateOutSell(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		Integer id = Integer.parseInt(request.getParameter("osID"));//出库单主键
		String osNo = String.valueOf(request.getParameter("osNo"));//出库单编号
		Timestamp outDate=CurrentTime.getCurrentTime1();; //出库时间
		String expNo = request.getParameter("expNo"); //快递编号
		Integer outUserId = this.getUserID(request); //出库人编号
		String outUserName = this.getuserName(request);//出库人
		boolean flag = oSManager.updateOSInfoById(id, osNo, outDate, outUserId, outUserName, expNo);
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	//根据出库单号查询（普通出库）
	public ActionForward checkOutNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		String outNo = String.valueOf(request.getParameter("oiNo"));//出库单编号
		List<OutInfo> oiList = oiManager.getInfoByoNo(outNo);
		boolean flag = false;
		if(oiList.size() > 0){
			flag = true;
		}
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
   }
	//判断销售出库 加工出库  单号是否重复
	public ActionForward checkSelloNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		String oNo = String.valueOf(request.getParameter("oiNo"));//出库单编号
		Integer otype = Integer.parseInt(request.getParameter("otype")); //出库类型
		List<OutSellInfo> osList = oSManager.getInfoByoNo(oNo, otype);
		boolean flag = false;
		if(osList.size() > 0){
			flag = true;
		}
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
   }
	//生成新销售,加工的出库单编号
	public ActionForward genSellNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		Integer otype = Integer.parseInt(request.getParameter("otype")); //出库类型
		//根据时间获取当天的采购订单数量
		Integer nextNumber = oSManager.getCurrOrdNum(otype)+1;
		String nextNumberStr = "";
		if(nextNumber < 10){
			nextNumberStr = "0"+nextNumber;
		}else{
			nextNumberStr = nextNumber+"";
		}
		String sellOrderNum="";
		if(otype.equals(0)){
			sellOrderNum = "L-M"+CurrentTime.getSimpleTime()+otype+"-"+nextNumberStr; //加工出库单号
		}else if(otype.equals(1)){
			sellOrderNum = "L-S"+CurrentTime.getSimpleTime()+otype+"-"+nextNumberStr; //加工出库单号
		}
		String json = JSON.toJSONString(sellOrderNum);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
   }
	//获取合同   回付款价格
	public ActionForward  getPriceSum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		OutSellInfoManager oSManager = (OutSellInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SELL_INFO);
		Map<String, String> price = new HashMap<String, String>();
		String osNo = request.getParameter("osNo");//出库单编号
		String sDate = request.getParameter("sDate");//出库单开始时间
		String eDate = request.getParameter("eDate");//出库单结束时间
		Integer o_sta = Integer.parseInt(request.getParameter("o_sta"));
		Integer bc_id = Integer.parseInt(request.getParameter("bid"));
		Integer oType = Integer.parseInt(request.getParameter("oType"));
		String eTime = CurrentTime.getStringDate();
		if(sDate==""){
			sDate=CurrentTime.getFinalDate(eTime, -2);
		}
		if(eDate==""){
			eDate=eTime;
		}
		Double allPrice = oSManager.getPriceSum(osNo, bc_id, o_sta, oType, sDate, eDate, "all");//应收账款
		Double actPrice = oSManager.getPriceSum(osNo, bc_id, o_sta, oType, sDate, eDate, "act"); //实收账款总额
		Double unPrice = allPrice - actPrice;//未收账款金额
		price.put("allPrice", Convert.convertInputNumber_1(allPrice));
		price.put("actPrice", Convert.convertInputNumber_1(actPrice));
		price.put("unPrice", Convert.convertInputNumber_1(unPrice));
		String json = JSON.toJSONString(price);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close();
		return null;
	}
	
	/**
	 * 导出领料出库单
	 * @description
	 * @author wm
	 * @date 2017-7-28 上午11:48:43
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportPInfoToExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		OutInfoManager oiManager = (OutInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_INFO);
		OutSubInfoManager osiManager = (OutSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_OUT_SUB_INFO);
		String o_no = "";
		Integer proid =Integer.parseInt(request.getParameter("proid"));
		Integer o_sta= Integer.parseInt(request.getParameter("o_sta"));
		String sDate = request.getParameter("sDate");
		String eDate = request.getParameter("eDate");
		String eTime = CurrentTime.getStringDate();
		if(sDate==null){
			sDate=CurrentTime.getFinalDate(eTime, -2);
		}
		if(eDate==null){
			eDate=eTime;
		}
		List<OutInfo> oiList = oiManager.getOiList(o_no, proid, o_sta, sDate, eDate, 1, 1000000);
		if(oiList.size() > 0){
			// 第一步，创建一个webbook，对应一个Excel文件  
	        HSSFWorkbook wb = new HSSFWorkbook();  
	        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
	        HSSFSheet sheet = wb.createSheet("领料出库单统计");  
	        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
	        HSSFRow row = sheet.createRow(0);  
	        // 第四步，创建单元格，并设置值表头 设置表头居中  
	        HSSFCellStyle style = wb.createCellStyle();  
	        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
	        HSSFCell cell = row.createCell(0);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("申请人");  
	        cell = row.createCell(1);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("出库单编号");  
	        cell = row.createCell(2);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("出库日期");  
	        cell = row.createCell(3);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("领料状态");  
	        cell = row.createCell(4);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("出库人");  
	        cell = row.createCell(5);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("物料名称");  
	        cell = row.createCell(6);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("物料编号");  
	        cell = row.createCell(7);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("出库数量");  
	        Integer lastNum = 1;//上一次子出库单数量
	        Integer num = 1;//循环次数
	        Integer rowIndex = 1;
			for(Iterator<OutInfo> it = oiList.iterator() ; it.hasNext();){//主表
				OutInfo oi = it.next();
				Integer oiId = oi.getId();
				String applyUserName = oi.getApplyUser();//申请人
				String outNo = oi.getOutNo();//出库编号
				String outDate = CurrentTime.convertTimestampToString_1(oi.getApplyDate());//制单日期
				String outUserName = oi.getUserInfo().getUserName();//制单人
				Integer outStatus = oi.getOutStatus();
				String outStatusTxt = "";//领料状态
				if(outStatus.equals(0)){
					outStatusTxt = "普通领料";
				}else if(outStatus.equals(1)){
					outStatusTxt = "加工领料";
				}
	        	
				if(num.equals(1)){

				}else{
					rowIndex += lastNum;
				}
				row = sheet.createRow(rowIndex);//创建行.
				
				List<OutSubInfo> osiList=osiManager.getListByOid(oiId);
				Integer osiLenth = osiList.size();//该出库单下对应几个子出库详单
				lastNum = osiLenth;
				Integer lastRow = rowIndex + osiLenth - 1;
				
				HSSFCell cell_data = row.createCell(0); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(applyUserName);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    0, //first column (0-based) from 列     
	                    0  //last column  (0-based)  to 列     
	            ));      
	        	
	        	cell_data = row.createCell(1); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(outNo);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	                    lastRow, //last row  (0-based)  to 行     
	                    1, //first column (0-based) from 列     
	                    1  //last column  (0-based)  to 列     
	            ));
	        	
	        	cell_data = row.createCell(2); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(outDate);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	                    lastRow, //last row  (0-based)  to 行     
	                    2, //first column (0-based) from 列     
	                    2  //last column  (0-based)  to 列     
	            ));
	        	
	        	
	        	cell_data = row.createCell(3); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(outStatusTxt);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    3, //first column (0-based) from 列     
	                    3  //last column  (0-based)  to 列     
	            ));
	        	
	        	cell_data = row.createCell(4); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(outUserName);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	                    lastRow, //last row  (0-based)  to 行     
	                    4, //first column (0-based) from 列     
	                    4  //last column  (0-based)  to 列     
	            ));
				num++;
				for(Integer j = 0 ; j < osiLenth ; j++){
					ProductInfo pro = osiList.get(j).getProductInfo();
					if(j > 0){
						row = sheet.createRow(rowIndex+j);//创建行.
					}
					cell_data = row.createCell(5); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(pro.getProName());
		        	
		        	cell_data = row.createCell(6); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(pro.getProNo());
		        	
		        	cell_data = row.createCell(7); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(osiList.get(j).getProNumber());
				}
			}

			
			// 第六步，将文件存到指定位置
	        String absoFilePath = "";//绝对地址
	        try  {  
	        	String fileName = "linliao_"+CurrentTime.getStringTime()+".xls";
	        	String folder = WebUrl.DATA_URL_PRO + "Module\\excelTemp\\";
	        	absoFilePath = folder +fileName;
	        	File file = new File(folder);
				if(!file.exists()){
					file.mkdirs();
				}
	            FileOutputStream fout = new FileOutputStream(absoFilePath);  
	            wb.write(fout);  
	            fout.close();  
		        //第七步 下载文件到客户端
		        OutputStream fos = null;
		        BufferedOutputStream bos = null;
		        InputStream fis = null;
		        BufferedInputStream bis = null;
		        fis = new FileInputStream(new File(absoFilePath));
				bis = new BufferedInputStream(fis);
				fos = response.getOutputStream();
				bos = new BufferedOutputStream(fos);
				//这个就就是弹出下载对话框的关键代码
				response.setHeader("Pragma", "No-cache");
				response.setHeader("Cache-Control", "No-cache");
				response.setDateHeader("Expires", 0); 
		        response.setHeader("Content-disposition","attachment;filename=" +fileName);
		        response.setContentType("application/x-download");
		        int bytesRead = 0;
		        byte[] buffer = new byte[8192];
		        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
		        	fos.write(buffer, 0, bytesRead);
		        }
		        fos.flush();
		        fis.close();
		        bis.close();
		        fos.close();
		        bos.close();
	        }  
	        catch (IOException e){  
	            //e.printStackTrace();  
	        }
		}
		return null;
	}
} 