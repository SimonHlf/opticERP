package com.optic.service.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.Transaction;

import com.optic.dao.ProductInfoDao;
import com.optic.dao.ProductTypeInfoDao;
import com.optic.exception.WEBException;
import com.optic.factory.DaoFactory;
import com.optic.module.ProductInfo;
import com.optic.module.ProductTypeInfo;
import com.optic.service.ProductInfoManager;
import com.optic.tools.HibernateUtil;
import com.optic.util.Constants;

public class ProductInfoManagerImpl implements ProductInfoManager {
	private ProductInfoDao productInfoDao;
	private Transaction tran;
	
	public Integer addProductInfo(String pNo, Integer pType, String pName,
			String pPy, String pSpec, String pCz, String pUnit, String pType2,
			Float pPriceL, Float pPriceH, Float pPriceA, Integer pNumber,
			String pRemark) throws WEBException {
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			ProductTypeInfoDao ptInfoDao = (ProductTypeInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_TYPE_INFO);
			Session sess = HibernateUtil.currentSession();
			tran = sess.beginTransaction();
			ProductInfo productInfo = new ProductInfo();
			ProductTypeInfo ptInfo = ptInfoDao.get(sess, pType);
			productInfo.setProductTypeInfo(ptInfo);
			productInfo.setProNo(pNo);
			productInfo.setProName(pName);
			productInfo.setProPy(pPy);
			productInfo.setProSpec(pSpec);
			productInfo.setProCz(pCz);
			productInfo.setProUnit(pUnit);
			productInfo.setProType2(pType2);
			productInfo.setProPriceL(pPriceL);
			productInfo.setProPriceH(pPriceH);
			productInfo.setProPriceA(pPriceA);
			productInfo.setProNumber(pNumber);
			productInfo.setProRemark(pRemark);
			productInfoDao.save(sess, productInfo);
			tran.commit();
			return productInfo.getId();
		} catch (Exception e) {
			tran.rollback();
			throw new WEBException("增加产品信息时出现异常!");
		}finally{
			HibernateUtil.closeSession();
		}
	}

	public boolean deleteProductInfo(Integer id) throws WEBException {
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			Session sess = HibernateUtil.currentSession();
			tran = sess.beginTransaction();
			productInfoDao.delete(sess, id);
			tran.commit();
			return true;
		} catch (Exception e) {
			throw new WEBException("删除指定产品信息时出现异常!");
		}finally{
			HibernateUtil.closeSession();
		}
	}

	public boolean updateProductInfo(Integer id, String pNo, Integer pType,
			String pName, String pPy, String pSpec, String pCz, String pUnit,
			String pType2, Float pPriceL, Float pPriceH, Float pPriceA,
			Integer pNumber, String pRemark) throws WEBException {
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			Session sess = HibernateUtil.currentSession();
			tran = sess.beginTransaction();
			ProductInfo productInfo =productInfoDao.get(sess, id);
			productInfo.setProNo(pNo);
			productInfo.setProName(pName);
			productInfo.setProPy(pPy);
			productInfo.setProSpec(pSpec);
			productInfo.setProCz(pCz);
			productInfo.setProUnit(pUnit);
			productInfo.setProType2(pType2);
			productInfo.setProPriceL(pPriceL);
			productInfo.setProPriceH(pPriceH);
			productInfo.setProPriceA(pPriceA);
			productInfo.setProNumber(pNumber);
			productInfo.setProRemark(pRemark);
			productInfoDao.update(sess, productInfo);
			tran.commit();
			return true;
		} catch (Exception e) {
			throw new WEBException("更新产品信息时出现异常!");
		}finally{
			HibernateUtil.closeSession();
		}
	}

	public List<ProductInfo> listProductInfo(Integer proTypeId , String proPy,int pageNo, int pageSize) throws WEBException {
		List<ProductInfo> result = new ArrayList<ProductInfo>();
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			Session sess = HibernateUtil.currentSession();
			List<ProductInfo> ntlist = productInfoDao.getProductInfoList(sess, proTypeId, proPy, pageNo, pageSize);
			for (Iterator<ProductInfo> itr = ntlist.iterator(); itr.hasNext();) {
				ProductInfo prInfo =itr.next();
				result.add(prInfo);
			}
		} catch (Exception e) {
			throw new WEBException("列出产品信息时出现异常,请重试！");
		} finally{
			HibernateUtil.closeSession();
		}
		return result;
	}

	public Integer getProCount(Integer proTypeId, String proPy)
			throws WEBException {
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			Session sess = HibernateUtil.currentSession();
			return productInfoDao.getProInfoCount(sess, proTypeId, proPy);
		
		} catch (Exception e) {
			throw new WEBException("列出产品记录数时出现异常,请重试！");
		} finally{
			HibernateUtil.closeSession();
		}
	}

	public List<ProductInfo> listProInfo(Integer proId) throws WEBException {
		try {
			productInfoDao = (ProductInfoDao) DaoFactory.instance(null).getDao(Constants.DAO_PRODUCT_INFO);
			Session sess = HibernateUtil.currentSession();
			return productInfoDao.getInfoById(sess, proId);
		} catch (Exception e) {
			throw new WEBException("列出产品信息时出现异常,请重试！");
		} finally{
			HibernateUtil.closeSession();
		}
	}
}
