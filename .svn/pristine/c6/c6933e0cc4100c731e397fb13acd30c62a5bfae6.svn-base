/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.purchase;

import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.exception.WEBException;
import com.optic.factory.AppFactory;
import com.optic.module.ProductInfo;
import com.optic.module.PurchaseOrderInfo;
import com.optic.module.json.PurchaseOrderInfoJson;
import com.optic.page.PageConst;
import com.optic.service.PayPurchaseInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.service.PurchaseOrderInfoManager;
import com.optic.service.PurchaseOrderSubInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PurchaseAction extends DispatchAction {
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	//获取session中的用户身份信息
	private String getDepName(HttpServletRequest request){
		String userDepName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_DEP_NAME);
		return userDepName;
	}
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goPurchasePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String eTime = CurrentTime.getStringDate();
		String sTime = CurrentTime.getFinalDate(eTime, -2);
		request.setAttribute("sTime", sTime);
		request.setAttribute("eTime", eTime);
		return mapping.findForward("purchaseList");
	}
	
	/**
	 * 根据条件获取采购单记录条数
	 * @description
	 * @author wm
	 * @date 2017-5-6 下午02:54:45
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPurchaseOrderCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String poNo = "";//采购单编号
		Integer option =CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = "";
		String eTime = "";
		Integer inStatus = -1;
		Integer payStatus = -2;
		sTime = request.getParameter("sTime");
		eTime = request.getParameter("eTime");
		if(option.equals(0)){//初始查询（最近3天）

		}else if(option.equals(1)){//根据组合条件查询
			inStatus = CommonTools.getFinalInteger(request.getParameter("inStatus"));
			payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
		}else if(option.equals(2)){//根据采购单号查询
			poNo = String.valueOf(request.getParameter("purOrder"));
		}
		Integer count = pom.getCountByOption(poNo, sTime, eTime, inStatus, payStatus);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
        return null;
	}
	
	/**
	 * 分页获取采购订单列表
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:23:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPurchaseOrderPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String poNo = "";//采购单编号
		Integer option =CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = "";
		String eTime = "";
		Integer inStatus = -1;
		Integer payStatus = -2;
		sTime = request.getParameter("sTime");
		eTime = request.getParameter("eTime");
		if(option.equals(0)){//初始查询（最近3天）

		}else if(option.equals(1)){//根据组合条件查询
			inStatus = CommonTools.getFinalInteger(request.getParameter("inStatus"));
			payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
		}else if(option.equals(2)){//根据采购单号查询
			poNo = String.valueOf(request.getParameter("purOrder"));
		}
		Integer count = pom.getCountByOption(poNo, sTime, eTime, inStatus, payStatus);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = pom.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);	
		List<PurchaseOrderInfo> poList = pom.listPageInfoByOption(poNo, sTime, eTime, inStatus, payStatus, pageNo, pageSize);
		List<PurchaseOrderInfoJson> result = new PurchaseOrderInfoJson().getPOJson(poList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 自动获取采购单编号
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午11:45:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPoNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String currDate = CurrentTime.getStringDate();
		//根据时间获取当天的采购订单数量
		Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
		String nextNumberStr = "";
		if(nextNumber < 10){
			nextNumberStr = "0"+nextNumber;
		}else{
			nextNumberStr = nextNumber+"";
		}
		String purOrderNum = "L-C"+CurrentTime.getSimpleTime()+"-"+nextNumberStr;
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", purOrderNum);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
        return null;
	}
	
	/**
	 * 增加采购订单
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:32:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward addPurchaseOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String msg = "fail";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getDepName(request).equals("采购")){
			//采购订单参数
			PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
			PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
			PayPurchaseInfoManager ppm = (PayPurchaseInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PAY_PURCHASE_INFO);
			ProductInfoManager pm = (ProductInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
			Integer bId = CommonTools.getFinalInteger(request.getParameter("bId"));//供应商编号
			Integer purUserId = this.getUserID(request);//采购人编号
			Timestamp pDate = CurrentTime.getCurrentTime1();//采购制单日期
			Float pTotalMoney = CommonTools.getFinalFloat(request.getParameter("pTotalMoney"));//页面总金额
			Float pTotalMoney_temp = 0f;//实际计算总金额(临时)
			Float pTotalMoney_active = 0f;//实际计算总金额
			Integer status = 0;//增加订单时默认为采购中
			Integer payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
			Integer invoiceStatus = CommonTools.getFinalInteger(request.getParameter("invoiceStatus"));
			String pRemark = "";
			//根据时间获取当天的采购订单数量+1
			String currDate = CurrentTime.getStringDate();
			Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
			String nextNumberStr = "";
			if(nextNumber < 10){
				nextNumberStr = "0"+nextNumber;
			}else{
				nextNumberStr = nextNumber+"";
			}
			String poNo = "L-C"+CurrentTime.getSimpleTime()+"-"+nextNumberStr;//订单号构成（L-C+日期+序号）
			//step1:增加采购订单
			Integer poId = pom.addPO(bId, poNo, purUserId, pDate, pTotalMoney, status, payStatus, invoiceStatus, pRemark);
			if(poId > 0){
				//采购订单详细参数（:分割）订单1:订单2[商品编号,商品单价,采购数量]
				String posStr = String.valueOf(request.getParameter("posStr"));//采购订单详情列表
				String[] posArray = posStr.split(":");
				if(posArray.length > 0){
					Integer num = posArray[0].split(",").length;
					for(Integer i = 0 ; i < num ; i++){
						Integer pId = Integer.parseInt(posArray[0].split(",")[i]);//商品编号
						Float psMoney = Float.parseFloat(posArray[1].split(",")[i]);//商品单价
						Integer psNum = Integer.parseInt(posArray[2].split(",")[i]);//采购数量
						Float psTotalMoney = Convert.convertInputNumber(psNum * psMoney);//子订单总金额
						pTotalMoney_temp += Convert.convertInputNumber(psTotalMoney);
						//step2:增加采购订单详细信息
						posm.addPOS(poId, bId, pId, psNum, psMoney, psTotalMoney);
						//此处采购单价和之前产品单价进行对比（根据商品编号获取历史进货价格记录）
						List<ProductInfo> pList = pm.listProInfo(pId);
						if(pList.size() > 0){
							float price_h = pList.get(0).getProPriceH();
							float price_l = pList.get(0).getProPriceL();
							if(price_h == 0.00 && price_l == 0.00){//第一次
								//修改最低、最高价格
								pm.updatePriceById(pId, psMoney, "a");
							}else{
								if(psMoney > price_h){
									//修改最高价格
									pm.updatePriceById(pId, psMoney, "h");
								}else if(psMoney < price_l){
									//修改最低价格
									pm.updatePriceById(pId, psMoney, "l");
								}
							}
						}
					}
					pTotalMoney_active = Convert.convertInputNumber(pTotalMoney_temp);
					if(pTotalMoney_active.equals(pTotalMoney)){
						//如果是采购付款，直接增加付款记录
						if(payStatus.equals(2)){
							ppm.addPP(poId, CurrentTime.getCurrentTime1(), pTotalMoney_active, "cgp");
						}
						msg = "succ";//成功
					}else{//故意捣乱
						msg = "fail";//失败
						//删除已增加的采购子订单
						boolean delFlag = posm.delAllPOSByPoId(poId);
						if(delFlag){
							//删除已增加的采购订单
							pom.delPO(poId);
						}
					}
				}else{
					msg = "fail";
					//删除已添加的采购订单
					pom.delPO(poId);
				}
				
			}else{
				msg = "fail";//失败
			}
		}else{
			msg = "noAbility";
		}

		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 添加财务付款记录
	 * @description
	 * @author wm
	 * @date 2017-5-7 下午03:26:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addPayPurchaseInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		//采购订单参数
		String msg = "fail";
		if(this.getDepName(request).equals("财务")){
			PayPurchaseInfoManager ppm = (PayPurchaseInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PAY_PURCHASE_INFO);
			PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
			Integer poId = CommonTools.getFinalInteger(request.getParameter("poId"));
			float currPayMoney = Convert.convertInputNumber(CommonTools.getFinalFloat(request.getParameter("currPayMoney")));
			Integer ppId = ppm.addPP(poId, CurrentTime.getCurrentTime1(), currPayMoney, "cwp");
			Integer payStatus = -2;//标记状态
			boolean flag = false;
			if(ppId > 0){
				//先查询该订单的总金额、实际付款总额
				List<PurchaseOrderInfo> poList = pom.listInfoById(poId);
				if(poList.size() > 0){
					float allMoney = Convert.convertInputNumber(poList.get(0).getPurTotalMoney());
					float payedMoney = Convert.convertInputNumber(poList.get(0).getPurRealMoney());
					float noPayedMoney = Convert.convertInputNumber(allMoney - payedMoney);
					if(noPayedMoney > currPayMoney){//未付清
						payStatus = 0;
					}else if(noPayedMoney == currPayMoney){//付清
						payStatus = 1;
					}else{//出错
						
					}
					if(payStatus >= 0){
						//修改采购订单中的实际付款总额
						flag = pom.updateActivePayMoney(poId, Convert.convertInputNumber(payedMoney + currPayMoney));
						if(flag){
							//修改采购订单中付款状态
							flag = pom.updateStatus(poId, null, payStatus);
							if(flag){
								msg = "succ";
							}
						}else{
							//回滚操作
							ppm.delInfoById(ppId);
						}
					}
				}else{
					//回滚操作
					ppm.delInfoById(ppId);
				}
			}
		}else{
			msg = "noAbility";
		}
		
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 执行报账动作
	 * @description
	 * @author wm
	 * @date 2017-5-7 下午04:49:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward execReimbursement(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		Integer poId = CommonTools.getFinalInteger(request.getParameter("poId"));
		boolean flag = false;
		List<PurchaseOrderInfo> poList = pom.listInfoById(poId);
		if(poList.size() > 0){
			Integer inStatus = poList.get(0).getStatus();
			Integer payStatus = poList.get(0).getPayStatus();
			if(inStatus.equals(2)){//只有全部入库才能进行报账
				if(payStatus.equals(2)){//只有是采购已付未报账才能进行报账
					//修改订单付款状态
					flag = pom.updateStatus(poId, null, 3);
				}
			}
		}
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
}