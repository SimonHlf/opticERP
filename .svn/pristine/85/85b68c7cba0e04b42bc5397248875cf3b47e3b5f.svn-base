/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.purchase;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.exception.WEBException;
import com.optic.factory.AppFactory;
import com.optic.module.ProductInfo;
import com.optic.module.PurchaseOrderInfo;
import com.optic.module.PurchaseOrderSubInfo;
import com.optic.module.json.PurchaseOrderInfoJson;
import com.optic.module.json.PurchaseOrderSubInfoJson;
import com.optic.page.PageConst;
import com.optic.service.PayPurchaseInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.service.PurchaseOrderInfoManager;
import com.optic.service.PurchaseOrderSubInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;
import com.optic.util.WebUrl;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PurchaseAction extends DispatchAction {
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	//获取session中的用户身份信息
	private String getDepName(HttpServletRequest request){
		String userDepName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_DEP_NAME);
		return userDepName;
	}
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goPurchasePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String eTime = CurrentTime.getStringDate();
		String sTime = CurrentTime.getFinalDate(eTime, -2);
		request.setAttribute("sTime", sTime);
		request.setAttribute("eTime", eTime);
		return mapping.findForward("purchaseList");
	}
	
	/**
	 * 根据条件获取采购单记录条数
	 * @description
	 * @author wm
	 * @date 2017-5-6 下午02:54:45
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPurchaseOrderCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String poNo = "";//采购单编号
		Integer option =CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = "";
		String eTime = "";
		Integer bcId = 0;
		Integer inStatus = -1;
		Integer payStatus = -2;
		sTime = request.getParameter("sTime");
		eTime = request.getParameter("eTime");
		if(option.equals(0)){//初始查询（最近3天）

		}else if(option.equals(1)){//根据组合条件查询
			inStatus = CommonTools.getFinalInteger(request.getParameter("inStatus"));
			payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
			bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		}else if(option.equals(2)){//根据采购单号查询
			poNo = String.valueOf(request.getParameter("purOrder"));
		}
		Integer count = pom.getCountByOption(bcId, poNo, sTime, eTime, inStatus, payStatus);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
        return null;
	}
	
	/**
	 * 分页获取采购订单列表
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:23:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPurchaseOrderPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String poNo = "";//采购单编号
		Integer option =CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = "";
		String eTime = "";
		Integer bcId = 0;
		Integer inStatus = -1;
		Integer payStatus = -2;
		sTime = request.getParameter("sTime");
		eTime = request.getParameter("eTime");
		if(option.equals(0)){//初始查询（最近3天）

		}else if(option.equals(1)){//根据组合条件查询
			inStatus = CommonTools.getFinalInteger(request.getParameter("inStatus"));
			payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
			bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		}else if(option.equals(2)){//根据采购单号查询
			poNo = String.valueOf(request.getParameter("purOrder"));
		}
		Integer count = pom.getCountByOption(bcId, poNo, sTime, eTime, inStatus, payStatus);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = pom.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);	
		List<PurchaseOrderInfo> poList = pom.listPageInfoByOption(bcId, poNo, sTime, eTime, inStatus, payStatus, pageNo, pageSize);
		List<PurchaseOrderInfoJson> result = new PurchaseOrderInfoJson().getPOJson(poList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", result);
		//获取所有付款信息
		List<Object> tjInfo = pom.listTjInfoByOption(bcId, poNo, sTime, eTime, inStatus, payStatus);
		map.put("tjInfo", tjInfo);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 自动获取采购单编号
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午11:45:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPoNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String currDate = CurrentTime.getStringDate();
		//根据时间获取当天的采购订单数量
		Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
		String nextNumberStr = "";
		if(nextNumber < 10){
			nextNumberStr = "0"+nextNumber;
		}else{
			nextNumberStr = nextNumber+"";
		}
		String purOrderNum = "L-C"+CurrentTime.getSimpleTime()+"-"+nextNumberStr;
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", purOrderNum);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
        return null;
	}
	
	/**
	 * 增加采购订单
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:32:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward addPurchaseOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		String msg = "fail";
		Map<String,String> map = new HashMap<String,String>();
		if(this.getDepName(request).equals("采购")){
			//采购订单参数
			PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
			PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
			PayPurchaseInfoManager ppm = (PayPurchaseInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PAY_PURCHASE_INFO);
			ProductInfoManager pm = (ProductInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
			Integer bId = CommonTools.getFinalInteger(request.getParameter("bId"));//供应商编号
			Integer purUserId = this.getUserID(request);//采购人编号
			Timestamp pDate = CurrentTime.getCurrentTime1();//采购制单日期
			Double pTotalMoney = CommonTools.getFinalDouble(request.getParameter("pTotalMoney"));//页面总金额
			Double pTotalMoney_temp = 0d;//实际计算总金额(临时)
			Double pTotalMoney_active = 0d;//实际计算总金额
			Integer status = 0;//增加订单时默认为采购中
			Integer payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
			Integer invoiceStatus = CommonTools.getFinalInteger(request.getParameter("invoiceStatus"));
			String pRemark = "";
			//根据时间获取当天的采购订单数量+1
			String currDate = CurrentTime.getStringDate();
			Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
			String nextNumberStr = "";
			if(nextNumber < 10){
				nextNumberStr = "0"+nextNumber;
			}else{
				nextNumberStr = nextNumber+"";
			}
			String poNo = "L-C"+CurrentTime.getSimpleTime()+"-"+nextNumberStr;//订单号构成（L-C+日期+序号）
			//step1:增加采购订单
			Integer poId = pom.addPO(bId, poNo, purUserId, pDate, pTotalMoney, status, payStatus, invoiceStatus, pRemark);
			if(poId > 0){
				//采购订单详细参数（:分割）订单1:订单2[商品编号,商品单价,采购数量]
				String posStr = String.valueOf(request.getParameter("posStr"));//采购订单详情列表
				String[] posArray = posStr.split(":");
				if(posArray.length > 0){
					Integer num = posArray[0].split(",").length;
					for(Integer i = 0 ; i < num ; i++){
						Integer pId = Integer.parseInt(posArray[0].split(",")[i]);//商品编号
						Double psMoney = CommonTools.getFinalDouble(posArray[1].split(",")[i]);//商品单价
						Integer psNum = Integer.parseInt(posArray[2].split(",")[i]);//采购数量
						Double psTotalMoney = CommonTools.getFinalDouble(Convert.convertInputNumber_1(psNum * psMoney));//子订单总金额
						pTotalMoney_temp += psTotalMoney;
						//step2:增加采购订单详细信息
						posm.addPOS(poId, bId, pId, psNum, psMoney, psTotalMoney);
						//此处采购单价和之前产品单价进行对比（根据商品编号获取历史进货价格记录）
						List<ProductInfo> pList = pm.listProInfo(pId);
						if(pList.size() > 0){
							Double price_h = pList.get(0).getProPriceH();
							Double price_l = pList.get(0).getProPriceL();
							if(price_h == 0.00 && price_l == 0.00){//第一次
								//修改最低、最高价格
								pm.updatePriceById(pId, psMoney, "a");
							}else{
								if(psMoney > price_h){
									//修改最高价格
									pm.updatePriceById(pId, psMoney, "h");
								}else if(psMoney < price_l){
									//修改最低价格
									pm.updatePriceById(pId, psMoney, "l");
								}
							}
						}
					}
					pTotalMoney_active = pTotalMoney_temp;
					if(pTotalMoney_active.equals(pTotalMoney)){
						//如果是采购付款，直接增加付款记录
						if(payStatus.equals(2)){
							ppm.addPP(poId, CurrentTime.getCurrentTime1(), pTotalMoney_active, "cgp");
						}
						msg = "succ";//成功
					}else{//故意捣乱
						msg = "fail";//失败
						//删除已增加的采购子订单
						boolean delFlag = posm.delAllPOSByPoId(poId);
						if(delFlag){
							//删除已增加的采购订单
							pom.delPO(poId);
						}
					}
				}else{
					msg = "fail";
					//删除已添加的采购订单
					pom.delPO(poId);
				}
				
			}else{
				msg = "fail";//失败
			}
		}else{
			msg = "noAbility";
		}

		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 添加财务付款记录
	 * @description
	 * @author wm
	 * @date 2017-5-7 下午03:26:55
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addPayPurchaseInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		//采购订单参数
		String msg = "fail";
		if(this.getDepName(request).equals("财务")){
			PayPurchaseInfoManager ppm = (PayPurchaseInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PAY_PURCHASE_INFO);
			PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
			Integer poId = CommonTools.getFinalInteger(request.getParameter("poId"));
			Double currPayMoney = CommonTools.getFinalDouble(request.getParameter("currPayMoney"));
			Double currRealPayMoney = 0d;//当前的真实付款
			Integer ppId = 0;
			Integer payStatus = -2;//标记状态
			boolean flag = false;
			
			//针对一个公司全部付款多出的参数
			String option = String.valueOf(request.getParameter("option"));
			if(option.equals("allPay")){
				Integer bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
				String sDate = String.valueOf(request.getParameter("sDate"));
				String eDate = String.valueOf(request.getParameter("eDate"));
				Integer inStatus = Integer.parseInt(request.getParameter("inStatus"));
				payStatus = Integer.parseInt(request.getParameter("payStatus"));
				List<PurchaseOrderInfo> poList = pom.listInfoByOption(bcId, "", sDate, eDate, inStatus, payStatus);
				if(poList.size() > 0){
					for(Iterator<PurchaseOrderInfo> it = poList.iterator() ; it.hasNext();){
						if(currPayMoney <= 0){
							msg = "succ";
							break;
						}else{
							PurchaseOrderInfo poInfo = it.next();
							poId = poInfo.getId();
							Double allMoney = poInfo.getPurTotalMoney();
							Double payedMoney = poInfo.getPurRealMoney();
							Double noPayedMoney = allMoney - payedMoney;
							if(poInfo.getPayStatus().equals(1)){//上轮已经付清
								msg = "succ";
							}else{
								if(currPayMoney >= noPayedMoney){//付清
									payStatus = 1;
									currRealPayMoney = noPayedMoney;
								}else{//未付清
									payStatus = 0;
									currRealPayMoney = currPayMoney;
								}
								currPayMoney -= noPayedMoney;
								//step1:增加付款记录
								ppId = ppm.addPP(poId, CurrentTime.getCurrentTime1(), currRealPayMoney, "cwp");
								if(ppId > 0){
									//step2:修改采购订单中的实际付款总额
									flag = pom.updateActivePayMoney(poId, (payedMoney + currRealPayMoney));
									if(flag){
										//step3:修改采购订单中付款状态
										flag = pom.updateStatus(poId, null, payStatus);
										if(flag){
											msg = "succ";
										}
									}
								}
							}
							
						}
						
					}
				}
			}else{//正常流程，单个付款
				ppId = ppm.addPP(poId, CurrentTime.getCurrentTime1(), currPayMoney, "cwp");
				if(ppId > 0){
					//先查询该订单的总金额、实际付款总额
					List<PurchaseOrderInfo> poList = pom.listInfoById(poId);
					if(poList.size() > 0){
						Double allMoney = poList.get(0).getPurTotalMoney();
						Double payedMoney = poList.get(0).getPurRealMoney();
						Double noPayedMoney = allMoney - payedMoney;
						if(noPayedMoney > currPayMoney){//未付清
							payStatus = 0;
						}else if(noPayedMoney == currPayMoney){//付清
							payStatus = 1;
						}else{//出错
							
						}
						if(payStatus >= 0){
							//修改采购订单中的实际付款总额
							flag = pom.updateActivePayMoney(poId, (payedMoney + currPayMoney));
							if(flag){
								//修改采购订单中付款状态
								flag = pom.updateStatus(poId, null, payStatus);
								if(flag){
									msg = "succ";
								}
							}else{
								//回滚操作
								ppm.delInfoById(ppId);
							}
						}
					}else{
						//回滚操作
						ppm.delInfoById(ppId);
					}
				}
			}
			
			
			
		}else{
			msg = "noAbility";
		}
		
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 执行报账动作
	 * @description
	 * @author wm
	 * @date 2017-5-7 下午04:49:05
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward execReimbursement(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		Integer poId = CommonTools.getFinalInteger(request.getParameter("poId"));
		boolean flag = false;
		List<PurchaseOrderInfo> poList = pom.listInfoById(poId);
		if(poList.size() > 0){
			Integer inStatus = poList.get(0).getStatus();
			Integer payStatus = poList.get(0).getPayStatus();
			if(inStatus.equals(2)){//只有全部入库才能进行报账
				if(payStatus.equals(2)){//只有是采购已付未报账才能进行报账
					//修改订单付款状态
					flag = pom.updateStatus(poId, null, 3);
				}
			}
		}
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取指定厂家所有未完成的采购订单列表
	 * @description
	 * @author wm
	 * @date 2017-6-8 上午09:40:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getUnFinishInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		Integer bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		String purNo = String.valueOf(request.getParameter("purNo"));
		List<PurchaseOrderInfo> poList = pom.listUnFinishInfoBybcId(bcId,purNo);
		List<PurchaseOrderInfo> result = new PurchaseOrderInfoJson().getUnFinishJson(poList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取指定采购订单下的未完成的订单详情
	 * @description
	 * @author wm
	 * @date 2017-6-8 下午03:03:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getUnFinishDetailInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
		Integer purId = CommonTools.getFinalInteger(request.getParameter("purId"));
		List<PurchaseOrderSubInfo> posList = posm.listInfoByPoId(purId);
		List<PurchaseOrderSubInfoJson> result = new PurchaseOrderSubInfoJson().getUnFinishDetailJson(posList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 导出采购出库单
	 * @description
	 * @author wm
	 * @date 2017-7-31 下午03:38:59
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportPurInfoToExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
		String poNo = "";//采购单编号
		String sTime = request.getParameter("sTime");
		String eTime = request.getParameter("eTime");
		Integer bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		Integer inStatus = CommonTools.getFinalInteger(request.getParameter("inStatus"));
		Integer payStatus = CommonTools.getFinalInteger(request.getParameter("payStatus"));
		List<PurchaseOrderInfo> purList = pom.listInfoByOption(bcId, poNo, sTime, eTime, inStatus, payStatus);
		if(purList.size() > 0){
			// 第一步，创建一个webbook，对应一个Excel文件  
	        HSSFWorkbook wb = new HSSFWorkbook();  
	        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
	        HSSFSheet sheet = wb.createSheet("采购单统计");  
	        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
	        HSSFRow row = sheet.createRow(0);  
	        // 第四步，创建单元格，并设置值表头 设置表头居中  
	        HSSFCellStyle style = wb.createCellStyle();  
	        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
            style.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER);  
	        HSSFCell cell = row.createCell(0);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购单编号");  
	        cell = row.createCell(1);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购人员");  
	        cell = row.createCell(2);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("制单日期");  
	        cell = row.createCell(3);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购公司");  
	        cell = row.createCell(4);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("物料名称"); 
	        cell = row.createCell(5);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("物料编号"); 
	        cell = row.createCell(6);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购数量"); 
	        cell = row.createCell(7);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购单价"); 
	        cell = row.createCell(8);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购总价"); 
	        cell = row.createCell(9);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("入库状态");  
	        cell = row.createCell(10);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("付款状态");  
	        cell = row.createCell(11);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("采购总额");  
	        cell = row.createCell(12);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("实付总额"); 
	        cell = row.createCell(13);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("发票");
	        cell = row.createCell(14);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("备注");
	        Integer lastNum = 1;//上一次子出库单数量
	        Integer rowIndex = 1;
	        for(Integer i = 0 ; i < purList.size() ; i++){
	        	PurchaseOrderInfo po = purList.get(i);
	        	Integer poId = po.getId();
	        	String poNo_t = po.getPurONo();
	        	String poUser = po.getUserInfo().getUserName();
	        	String poDate = CurrentTime.convertTimestampToString_1(po.getPurDate());
	        	String poCompany = po.getBusinessContactInfo().getBcName();
	        	Integer inStatus_t = po.getStatus();
	        	Integer invoiceStatus = po.getInvoiceStatus();
	        	Integer payStatus_t = po.getPayStatus();
	        	String purRemark = po.getPurRemark();
	        	String inStatusStr = "";
	        	String payStatusStr = "";
	        	String invoiceStatusStr = "";
	        	if(inStatus_t.equals(0)){
	        		inStatusStr = "采购中";
	        	}else if(inStatus_t.equals(1)){
	        		inStatusStr = "部分入库";
	        	}else if(inStatus_t.equals(2)){
	        		inStatusStr = "全部入库";
	        	}
	        	
	        	if(payStatus_t.equals(-1)){
	        		payStatusStr = "未付款";
	        	}else if(payStatus_t.equals(0)){
	        		payStatusStr = "未付清";
	        	}else if(payStatus_t.equals(1)){
	        		payStatusStr = "财务已付";
	        	}else if(payStatus_t.equals(2)){
	        		payStatusStr = "采购已付未报账";
	        	}else if(payStatus_t.equals(3)){
	        		payStatusStr = "采购已付已报账";
	        	}
	        	if(invoiceStatus.equals(0)){
	        		invoiceStatusStr = "无发票";
	        	}else{
	        		invoiceStatusStr = "有发票";
	        	}
	        	Double purTotalMoney = po.getPurTotalMoney();
	        	Double purActMoney = po.getPurRealMoney();
	        	
	        	if(i > 0){
	        		rowIndex += lastNum;
	        	}
	        	row = sheet.createRow(rowIndex);//创建行.
	        	List<PurchaseOrderSubInfo> posList = posm.listInfoByPoId(poId);
	        	Integer osiLenth = posList.size();//该采购单下对应几个子采购详单
				lastNum = osiLenth;
				Integer lastRow = rowIndex + osiLenth - 1;
				
				HSSFCell cell_data = row.createCell(0); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(poNo_t);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    0, //first column (0-based) from 列     
	                    0  //last column  (0-based)  to 列     
	            ));   
	        	cell_data = row.createCell(1); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(poUser);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	                    lastRow, //last row  (0-based)  to 行     
	                    1, //first column (0-based) from 列     
	                    1  //last column  (0-based)  to 列     
	            ));
	        	
	        	cell_data = row.createCell(2); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(poDate);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	                    lastRow, //last row  (0-based)  to 行     
	                    2, //first column (0-based) from 列     
	                    2  //last column  (0-based)  to 列     
	            ));
	        	
	        	cell_data = row.createCell(3); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(poCompany);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    3, //first column (0-based) from 列     
	                    3  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(9); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(inStatusStr);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    9, //first column (0-based) from 列     
	                    9  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(10); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(payStatusStr);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    10, //first column (0-based) from 列     
	                    10  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(11); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(Convert.convertMoney(purTotalMoney));
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    11, //first column (0-based) from 列     
	                    11  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(12); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(Convert.convertMoney(purActMoney));
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    12, //first column (0-based) from 列     
	                    12  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(13); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(invoiceStatusStr);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    13, //first column (0-based) from 列     
	                    13  //last column  (0-based)  to 列     
	            ));
	        	cell_data = row.createCell(14); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(purRemark);
	        	sheet.addMergedRegion(new CellRangeAddress(     
	        			rowIndex, //first row (0-based)  from 行     
	        			lastRow, //last row  (0-based)  to 行     
	                    14, //first column (0-based) from 列     
	                    14  //last column  (0-based)  to 列     
	            ));
	        	
	        	for(Integer  j = 0 ; j < osiLenth ; j++){
	        		PurchaseOrderSubInfo pos = posList.get(j);
	        		if(j > 0){
						row = sheet.createRow(rowIndex+j);//创建行.
					}
					cell_data = row.createCell(4); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(pos.getProductInfo().getProName());
		        	
		        	cell_data = row.createCell(5); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(pos.getProductInfo().getProNo());
		        	
		        	cell_data = row.createCell(6); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(pos.getProNumber());
		        	
		        	cell_data = row.createCell(7); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(Convert.convertMoney(pos.getProPrice()));
		        	
		        	cell_data = row.createCell(8); 
		        	cell_data.setCellStyle(style);
		        	cell_data.setCellValue(Convert.convertMoney(pos.getProTotalMoney()));
	        	}
	        }
	     // 第六步，将文件存到指定位置
	        String absoFilePath = "";//绝对地址
	        try  {  
	        	String fileName = "caigou_"+CurrentTime.getStringTime()+".xls";
	        	String folder = WebUrl.DATA_URL_PRO + "Module\\excelTemp\\";
	        	absoFilePath = folder +fileName;
	        	System.out.println(absoFilePath);
	        	File file = new File(folder);
				if(!file.exists()){
					file.mkdirs();
				}
	            FileOutputStream fout = new FileOutputStream(absoFilePath);  
	            wb.write(fout);  
	            fout.close();  
		        //第七步 下载文件到客户端
		        OutputStream fos = null;
		        BufferedOutputStream bos = null;
		        InputStream fis = null;
		        BufferedInputStream bis = null;
		        fis = new FileInputStream(new File(absoFilePath));
				bis = new BufferedInputStream(fis);
				fos = response.getOutputStream();
				bos = new BufferedOutputStream(fos);
				//这个就就是弹出下载对话框的关键代码
				response.setHeader("Pragma", "No-cache");
				response.setHeader("Cache-Control", "No-cache");
				response.setDateHeader("Expires", 0); 
		        response.setHeader("Content-disposition","attachment;filename=" +fileName);
		        response.setContentType("application/x-download");
		        int bytesRead = 0;
		        byte[] buffer = new byte[8192];
		        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
		        	fos.write(buffer, 0, bytesRead);
		        }
		        fos.flush();
		        fis.close();
		        bis.close();
		        fos.close();
		        bos.close();
	        }  
	        catch (IOException e){  
	            //e.printStackTrace();  
	        }
		}
		return null;
	}
}