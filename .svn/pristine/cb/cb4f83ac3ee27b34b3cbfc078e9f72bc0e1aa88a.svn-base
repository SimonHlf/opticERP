/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.product;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.DepartmentInfo;
import com.optic.module.ProductInfo;
import com.optic.module.json.DepartmentInfoJson;
import com.optic.module.json.ProductInfoJson;
import com.optic.page.PageConst;
import com.optic.service.DepartmentInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.util.Constants;

public class ProductInfoAction extends DispatchAction {
    //添加产品
	public ActionForward addProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		String pPy= Convert.getFirstSpell(proName);
		Integer ptID = Integer.parseInt(request.getParameter("ptID"));
		Integer madeDep = Integer.parseInt(request.getParameter("madeDep"));
		String pro_no = request.getParameter("pro_no");
		String pro_spec = Transcode.unescape(request.getParameter("pro_spec"),request);
		String pro_unit =Transcode.unescape(request.getParameter("pro_unit"), request);
		String pro_cz = Transcode.unescape(request.getParameter("pro_cz"),request);
		String pt_type = request.getParameter("pt_type");
		String pro_reMark= Transcode.unescape(request.getParameter("pro_remark"), request);
		Integer proID=	piManager.addProductInfo(pro_no, ptID, proName, pPy, pro_spec, pro_cz, pro_unit, pt_type, Float.valueOf("0"), Float.valueOf("0"), Float.valueOf("0"), 0, 0,pro_reMark,madeDep);
		String json = JSON.toJSONString(proID>0?true:false);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	//产品列表
	public ActionForward listProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer protypeId = CommonTools.getFinalInteger(request.getParameter("protypeId"));
		String propy = Transcode.unescape(request.getParameter("propy"), request);
		if(propy.equals("null")){
			propy = "";
		}
		Integer count = piManager.getProCount(protypeId, propy);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);
		List<ProductInfo> proInfo=piManager.listProductInfo(protypeId, propy, pageNo, pageSize);
		List<ProductInfo> pijson=new ProductInfoJson().getPiJson(proInfo);
		String json = JSON.toJSONString(pijson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//产品的记录数
	public ActionForward getProCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer protypeId = CommonTools.getFinalInteger(request.getParameter("protypeId"));//往来单位类别
		String propy = Transcode.unescape(request.getParameter("propy"), request);//往来单位拼音码
		if(propy.equals("null")){
			propy = "";
		}
		Integer count = piManager.getProCount(protypeId, propy);
		String json = JSON.toJSONString(count);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//更新指定产品信息
	public ActionForward updateProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer proID= Integer.parseInt(request.getParameter("proID"));
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		String pPy= Convert.getFirstSpell(proName);
		Integer ptID = Integer.parseInt(request.getParameter("ptID"));
		String pro_no = request.getParameter("pro_no");
		String pro_spec = request.getParameter("pro_spec");
		String pro_unit =Transcode.unescape(request.getParameter("pro_unit"), request);
		String pro_cz = request.getParameter("pro_cz");
		String pt_type = request.getParameter("pt_type");
		String pro_reMark= Transcode.unescape(request.getParameter("pro_remark"), request);
		boolean flag=	piManager.updateProductInfo(proID, pro_no, ptID, proName, pPy, pro_spec, pro_cz, pro_unit, pt_type, Float.valueOf("0"), Float.valueOf("0"), Float.valueOf("0"), 0, pro_reMark);
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//查看指定编号的产品信息
	public ActionForward listProtByOption(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer proId = CommonTools.getFinalInteger(request.getParameter("proId"));
		List<ProductInfo> proInfo=piManager.listProInfo(proId);
		List<ProductInfo> pijson=new ProductInfoJson().getPiJson(proInfo);
		String json = JSON.toJSONString(pijson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 检查是否存在该产品(存在返回true)
	 * @description
	 * @author wm
	 * @date 2017-5-10 上午10:11:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistByName(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		boolean flag = piManager.checkExistByName(proName);
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	/**
	 * 获取加工工艺信息
	 */
	public ActionForward listProcessInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DepartmentInfoManager dManager=(DepartmentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_DEP_INFO);
		List<DepartmentInfo> depList = dManager.listGxDepInfo();
		List<DepartmentInfo> depfojson = new DepartmentInfoJson().getDepInfoJson(depList);
		String json = JSON.toJSONString(depfojson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}

}