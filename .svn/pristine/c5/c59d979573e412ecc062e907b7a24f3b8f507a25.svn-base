/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.instore;

import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.InStoreInfo;
import com.optic.module.PurchaseOrderSubInfo;
import com.optic.module.json.InStoreInfoJson;
import com.optic.page.PageConst;
import com.optic.service.InstoreInfoManager;
import com.optic.service.InstoreSubInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.service.PurchaseOrderInfoManager;
import com.optic.service.PurchaseOrderSubInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-19-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class InstoreAction extends DispatchAction{
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}

	//获取session中的用户身份信息
	private String getDepName(HttpServletRequest request){
		String userDepName = (String)request.getSession(false).getAttribute(Constants.LOGIN_USER_DEP_NAME);
		return userDepName;
	}
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goInstorePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("instorePage");
	}
	
	/**
	 * 自动获取下一个入库单编号
	 * @description
	 * @author wm
	 * @date 2017-5-11 上午09:37:58
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInNo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		InstoreInfoManager insm = (InstoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_INFO);
		List<InStoreInfo> insList = insm.listLastInfo();
		String insNo_final = "";
		if(insList.size() > 0){
			insNo_final = CommonTools.getInStoreNo(insList.get(0).getInONo());
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", insNo_final);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据产品编号、厂家编号获取需要的入库数量
	 * 防止输入的入库数量大于需要实际入库的数量
	 * @description
	 * @author wm
	 * @date 2017-5-24 下午04:51:32
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getRemainNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
		Integer bcId = Integer.parseInt(request.getParameter("bcId"));
		Integer proId = Integer.parseInt(request.getParameter("proId"));
		//根据商品编号、供应商编号、入库数量小于商品采购数量的且订单状态不为2的记录
		List<PurchaseOrderSubInfo> posList = posm.listInfoByOption(proId, bcId);
		Integer remainNum_sum = 0;//数据库中需要进行入库的产品数量总计
		for(Iterator<PurchaseOrderSubInfo> it = posList.iterator() ; it.hasNext();){
			PurchaseOrderSubInfo pos = it.next();
			Integer remainNum = pos.getProNumber() - pos.getProRealNum();
			remainNum_sum += remainNum;
		}
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", remainNum_sum);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 增加入库动作
	 * @description
	 * @author wm
	 * @date 2017-5-22 下午03:08:45
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addInStore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		boolean flag = false;
		String msg = "";
		if(this.getDepName(request).equals("库房")){
			InstoreInfoManager insm = (InstoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_INFO);
			InstoreSubInfoManager issm = (InstoreSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_SUB_INFO);
			ProductInfoManager pm = (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
			PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
			PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
			Integer purId = Integer.parseInt(request.getParameter("purId"));//采购单主键
			String posIdStr = String.valueOf(request.getParameter("posIdStr"));//采购单下所有未完成的采购子订单编号
			Integer bcId = Integer.parseInt(request.getParameter("bcId"));
			String inNo = String.valueOf(request.getParameter("inNo"));
			String proIdStr = String.valueOf(request.getParameter("proIdStr"));
			String inNumStr = String.valueOf(request.getParameter("inNumberStr"));
			String whIdStr =  String.valueOf(request.getParameter("whIdStr"));
			Integer proId = 0;
			Integer whId = 0;
			Integer inNumber = 0;
			Integer inStatus = Integer.parseInt(request.getParameter("inStatus"));
			String remark = Transcode.unescape(request.getParameter("remark"), request);
			Integer userId = this.getUserID(request);
			Timestamp currDate = CurrentTime.getCurrentTime1();
			Integer inId = insm.addINS(bcId, inNo, userId, currDate, inStatus, remark);//增加入库动作
			boolean completeFlag = false;//所有采购子订单完成入库标记
			if(inId > 0){
				//增加入库详细信息
				if(inStatus.equals(1) || inStatus.equals(4)){//采购入库、采购人员外出采购入库
					String[] posIdArray = posIdStr.split(",");
					String[] proIdArray = proIdStr.split(",");
					String[] inNumberArray = inNumStr.split(",");
					String[] whIdArray = whIdStr.split(",");
					for(Integer i = 0 ; i < proIdArray.length ; i++){
						//增加入库记录
						issm.addISS(inId, Integer.parseInt(proIdArray[i]), Integer.parseInt(inNumberArray[i]), Integer.parseInt(whIdArray[i]), currDate);
						//修改产品库存数量
						pm.updateProNumber(Integer.parseInt(proIdArray[i]), Integer.parseInt(inNumberArray[i]),Integer.parseInt(inNumberArray[i]));
						//增加对应采购订单的实际入库数量
						posm.updateRealInNumById(Integer.parseInt(posIdArray[i]), Integer.parseInt(inNumberArray[i]));
					}
					//需要修改采购订单的入库数量，并根据实际情况修改采购订单的标记状态
					List<PurchaseOrderSubInfo> posList = posm.listInfoByPoId(purId);
					for(Iterator<PurchaseOrderSubInfo> it = posList.iterator() ; it.hasNext();){
						PurchaseOrderSubInfo pos = it.next();
						Integer remainNum = pos.getProNumber() - pos.getProRealNum();
						if(remainNum.equals(0)){
							completeFlag = true;
						}else{//没完全入库
							completeFlag = false;
							break;
						}
					}
					if(completeFlag){//完全入库，修改采购订单入库状态
						flag = pom.updateStatus(purId, 2, null);
					}else{
						//修改该主订单状态为部分入库
						flag = pom.updateStatus(purId, 1, null);
					}
					
				}else{//其他方式入库
					proId  = Integer.parseInt(proIdStr);
					inNumber = Integer.parseInt(inNumStr);
					whId = Integer.parseInt(whIdStr);
					//增加入库记录
					issm.addISS(inId, proId, inNumber, whId, currDate);
					//修改库存数量
					flag = pm.updateProNumber(proId, inNumber,inNumber);
				}
				if(flag){
					msg = "succ";
				}else{
					msg = "error";
				}
//				if(flag){
//					if(inStatus.equals(1)){//采购入库
//						//需要修改采购订单的入库数量，并根据实际情况修改采购订单的标记状态
//						//根据商品编号、供应商编号、入库数量小于商品采购数量的且订单状态不为2的记录
//						List<PurchaseOrderSubInfo> posList = posm.listInfoByOption(proId, bcId);
//						for(Iterator<PurchaseOrderSubInfo> it = posList.iterator() ; it.hasNext();){
//							PurchaseOrderSubInfo pos = it.next();
//							Integer posId = pos.getId();
//							Integer poId = pos.getPurchaseOrderInfo().getId();//主订单编号
//							Integer poStatus = pos.getPurchaseOrderInfo().getStatus();//主订单状态
//							Integer remainNum = pos.getProNumber() - pos.getProRealNum();
//							if(inNumber >= remainNum){//新入库数量大于等于余下实际数量
//								posm.updateRealInNumById(posId, remainNum);//该子订单完成
//								inNumber -= remainNum;
//								//查看主订单，如果主订单下子订单都完成，修改该主订单状态为全部入库
//								//如果为全部完成，不做主订单状态修改
//								List<PurchaseOrderSubInfo> posList_new = posm.listInfoByPoId(poId);//当前商品所处的主订单下的所有子订单
//								boolean completeFlag = false;
//								for(Iterator<PurchaseOrderSubInfo> it_1 = posList_new.iterator() ; it_1.hasNext();){
//									PurchaseOrderSubInfo pos_1 = it_1.next();
//									Integer remainNum_1 = pos_1.getProNumber() - pos_1.getProRealNum();
//									if(remainNum_1 > 0){//该子订单未采购完成
//										completeFlag = false;
//										break;
//									}else{//该子订单采购完成
//										completeFlag = true;
//									}
//								}
//								if(completeFlag){//所有子订单采购完成
//									//修改该主订单状态为全部入库
//									pom.updateStatus(poId, 2, null);
//								}else{//所有子订单采购未完成
//									if(poStatus.equals(0)){//采购中的状态修改成部分入库
//										//修改该主订单状态为部分入库
//										pom.updateStatus(poId, 1, null);
//									}
//								}
//							}else{//新入库的数量小于余下的实际数量
//								posm.updateRealInNumById(posId, inNumber);//该子订单完成
//								if(poStatus.equals(0)){//采购中的状态修改成部分入库
//									//修改该主订单状态为部分入库
//									pom.updateStatus(poId, 1, null);
//								}
//							}
//						}
//					}
//				}
			}else{
				msg = "error";
			}
		}else{
			msg = "noAbility";
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据条件获取入库记录条数
	 * @description
	 * @author wm
	 * @date 2017-5-25 下午03:05:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInOrderCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		InstoreInfoManager insm = (InstoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_INFO);
		Integer option = CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = request.getParameter("sTime");
		String eTime = request.getParameter("eTime");
		Integer inStatus = -1;
		Integer proId = 0;
		Integer bcId = 0;
		String inOrderNo = "";
		if(option.equals(0)){//初始查询，最近三天
			
		}else if(option.equals(1)){//根据组合条件查询
			inStatus = Integer.parseInt(request.getParameter("inStatus"));
			proId = Integer.parseInt(request.getParameter("proId"));
			bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		}else if(option.equals(2)){
			inOrderNo = String.valueOf(request.getParameter("inOrder"));
		}
		Integer count = insm.getCountByOption(inOrderNo, sTime, eTime, inStatus, proId, bcId);
		Map<String,Integer> map = new HashMap<String,Integer>();
		map.put("result", count);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 根据条件分页获取入库记录列表
	 * @description
	 * @author wm
	 * @date 2017-5-25 下午03:06:46
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getInOrderPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		InstoreInfoManager insm = (InstoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_IN_STORE_INFO);
		Integer option = CommonTools.getFinalInteger(request.getParameter("option"));
		String sTime = request.getParameter("sTime");
		String eTime = request.getParameter("eTime");
		Integer inStatus = -1;
		Integer proId = 0;
		Integer bcId = 0;
		String inOrderNo = "";
		if(option.equals(0)){//初始查询，最近三天
			
		}else if(option.equals(1)){//根据组合条件查询
			inStatus = Integer.parseInt(request.getParameter("inStatus"));
			proId = Integer.parseInt(request.getParameter("proId"));
			bcId = CommonTools.getFinalInteger(request.getParameter("bcId"));
		}else if(option.equals(2)){
			inOrderNo = String.valueOf(request.getParameter("inOrder"));
		}
		Integer count = insm.getCountByOption(inOrderNo, sTime, eTime, inStatus, proId, bcId);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = insm.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);	
		List<InStoreInfo> isList = insm.listPageInfoByOption(inOrderNo, sTime, eTime, inStatus, proId, bcId, pageNo, pageSize);
		List<InStoreInfoJson> result = new InStoreInfoJson().getIsJson(isList);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("result", result);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
}