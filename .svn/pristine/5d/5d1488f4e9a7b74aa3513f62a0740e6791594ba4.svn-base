/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.purchase;

import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.service.PurchaseOrderInfoManager;
import com.optic.service.PurchaseOrderSubInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.CurrentTime;
import com.optic.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PurchaseAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward goPurchasePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("purchaseList");
	}
	
	/**
	 * 分页获取采购订单列表
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:23:51
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward getPurchaseOrderPageInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * 自动获取采购单编号
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午11:45:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPoNum(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		String currDate = CurrentTime.getStringDate();
		//根据时间获取当天的采购订单数量
		Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
		String nextNumberStr = "";
		if(nextNumber < 10){
			nextNumberStr = "0"+nextNumber;
		}else{
			nextNumberStr = nextNumber+"";
		}
		String purOrderNum = "L-C"+CurrentTime.getSimpleTime()+"-"+nextNumberStr;
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", purOrderNum);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
        return null;
	}
	
	/**
	 * 增加采购订单
	 * @description
	 * @author wm
	 * @date 2017-4-21 上午10:32:57
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward addPurchaseOrder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		//采购订单参数
		PurchaseOrderInfoManager pom = (PurchaseOrderInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_INFO);
		PurchaseOrderSubInfoManager posm = (PurchaseOrderSubInfoManager)AppFactory.instance(null).getApp(Constants.WEB_PURCHASE_ORDER_SUB_INFO);
		Integer bId = CommonTools.getFinalInteger(request.getParameter("bId"));//供应商编号
//		String poNo = String.valueOf(request.getParameter("poNo"));//采购单编号（自动生成）
		Integer purUserId = CommonTools.getFinalInteger(request.getParameter("purUserId"));//采购人编号
		Timestamp pDate = CurrentTime.getCurrentTime1();//采购制单日期
		Float pTotalMoney = CommonTools.getFinalFloat(request.getParameter("pTotalMoney"));//页面总金额
		Float pTotalMoney_active = 0f;//实际计算总金额
		Integer status = 0;//增加订单时默认为采购中
		String payByUser = String.valueOf(request.getParameter("payByUser"));//采购付：cgPay,财务付:cwPay
		Integer payStatus = -1;//默认为未付款
		if(payByUser.equals("cgPay")){
			payStatus = 2;//当采购付款时初始还款状态为采购已付未报账
		}
		String pRemark = Transcode.unescape(request.getParameter("pRemark"), request);
		//根据时间获取当天的采购订单数量+1
		String currDate = CurrentTime.getStringDate();
		Integer nextNumber = pom.getMaxCountByDate(currDate) + 1;
		String nextNumberStr = "";
		if(nextNumber < 10){
			nextNumberStr = "0"+nextNumber;
		}else{
			nextNumberStr = nextNumber+"";
		}
		String poNo = "L-C"+currDate+"-"+nextNumberStr;//订单号构成（L-C+日期+序号）
		//step1:增加采购订单
		Integer poId = pom.addPO(bId, poNo, purUserId, pDate, pTotalMoney, status, payStatus, pRemark);
		Map<String,String> map = new HashMap<String,String>();
		String msg = "";
		if(poId > 0){
			//采购订单详细参数（:分割）订单1:订单2[商品编号,采购数量,商品单价]
			String posStr = String.valueOf(request.getParameter("posStr"));//采购订单详情列表
			String[] posArray = posStr.split(":");
			if(posArray.length > 0){
				for(Integer i = 0 ; i < posArray.length ; i++){
					Integer pId = Integer.parseInt(posArray[i].split(",")[0]);//商品编号
					Integer psNum = Integer.parseInt(posArray[i].split(",")[1]);//采购数量
					Float psMoney = Float.parseFloat(posArray[i].split(",")[2]);//商品单价
					Float psTotalMoney = psNum * psMoney;//子订单总金额
					pTotalMoney_active += psTotalMoney;
					//step2:增加采购订单详细信息
					posm.addPOS(poId, bId, pId, psNum, psMoney, psTotalMoney);
				}
				if(pTotalMoney_active.equals(pTotalMoney)){
					msg = "succ";//成功
				}else{//故意捣乱
					msg = "fail";//失败
					//删除已增加的采购子订单
					boolean delFlag = posm.delAllPOSByPoId(poId);
					if(delFlag){
						//删除已增加的采购订单
						pom.delPO(poId);
					}
				}
			}else{
				msg = "fail";
				//删除已添加的采购订单
				pom.delPO(poId);
			}
			
		}else{
			msg = "fail";//失败
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
}