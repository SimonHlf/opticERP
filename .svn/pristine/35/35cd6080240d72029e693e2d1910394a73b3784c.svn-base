/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.product;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.action.base.Transcode;
import com.optic.factory.AppFactory;
import com.optic.module.DepartmentInfo;
import com.optic.module.ProductInfo;
import com.optic.module.json.DepartmentInfoJson;
import com.optic.module.json.ProductInfoJson;
import com.optic.page.PageConst;
import com.optic.service.DepartmentInfoManager;
import com.optic.service.ProductInfoManager;
import com.optic.tools.CommonTools;
import com.optic.tools.Convert;
import com.optic.tools.CurrentTime;
import com.optic.tools.FileOpration;
import com.optic.util.Constants;
import com.optic.util.WebUrl;

public class ProductInfoAction extends DispatchAction {
    //添加产品
	public ActionForward addProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		String pPy= Convert.getFirstSpell(proName);
		Integer ptID = Integer.parseInt(request.getParameter("ptID"));
		Integer madeDep = Integer.parseInt(request.getParameter("madeDep"));
		String pro_no = request.getParameter("pro_no");
		String pro_spec = Transcode.unescape(request.getParameter("pro_spec"),request);
		String pro_unit =Transcode.unescape(request.getParameter("pro_unit"), request);
		String pro_cz = Transcode.unescape(request.getParameter("pro_cz"),request);
		String pt_type = request.getParameter("pt_type");
		String pro_reMark= Transcode.unescape(request.getParameter("pro_remark"), request);
		Integer proID=	piManager.addProductInfo(pro_no, ptID, proName, pPy, pro_spec, pro_cz, pro_unit, pt_type, Double.valueOf("0"), Double.valueOf("0"), Double.valueOf("0"), 0, 0,pro_reMark,madeDep);
		String json = JSON.toJSONString(proID>0?true:false);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	//产品列表
	public ActionForward listProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer protypeId = CommonTools.getFinalInteger(request.getParameter("protypeId"));
		String propy = Transcode.unescape(request.getParameter("propy"), request);
		String option = String.valueOf(request.getParameter("option"));
		boolean inNumStatus = false;
		boolean madeStatus = false;
		if(option.equals("outStore")){//加工领料出库//库存必须大于0且综合加工过后的产品不能再加工
			inNumStatus = true;
			madeStatus = true;
		}else if(option.equals("sellOut")){//销售、外协加工出库//库存必须大于0
			inNumStatus = true;
			madeStatus = false;
		}
		if(propy.equals("null")){
			propy = "";
		}
		Integer count = piManager.getProCount(protypeId, propy,inNumStatus,madeStatus);
		Integer pageSize;
		String pageSizeStr = request.getParameter("pageSize");// 每页显示的记录数
		try {
			pageSize = Integer.parseInt(pageSizeStr.trim());
		} catch (Exception e) {
			pageSize = 10;
		}
		int pageCount = PageConst.getPageCount(count, pageSize);
		int pageNo;//页数
		String pageNoStr = request.getParameter("pageNo");//当前页码数
		pageNo = PageConst.getPageNo(pageNoStr, pageCount);
		List<ProductInfo> proInfo=piManager.listProductInfo(protypeId, propy,inNumStatus,madeStatus, pageNo, pageSize);
		List<ProductInfo> pijson=new ProductInfoJson().getPiJson(proInfo);
		String json = JSON.toJSONString(pijson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//产品的记录数
	public ActionForward getProCount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer protypeId = CommonTools.getFinalInteger(request.getParameter("protypeId"));//往来单位类别
		String propy = Transcode.unescape(request.getParameter("propy"), request);//往来单位拼音码
		String option = String.valueOf(request.getParameter("option"));
		boolean inNumStatus = false;
		boolean madeStatus = false;
		if(option.equals("outStore")){//加工领料出库//库存必须大于0且综合加工过后的产品不能再加工
			inNumStatus = true;
			madeStatus = true;
		}else if(option.equals("sellOut")){//销售、外协加工出库//库存必须大于0
			inNumStatus = true;
			madeStatus = false;
		}
		if(propy.equals("null")){
			propy = "";
		}
		Integer count = piManager.getProCount(protypeId, propy,inNumStatus,madeStatus);
		String json = JSON.toJSONString(count);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//更新指定产品信息
	public ActionForward updateProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer proID= Integer.parseInt(request.getParameter("proID"));
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		String pPy= Convert.getFirstSpell(proName);
		Integer ptID = Integer.parseInt(request.getParameter("ptID"));
		String pro_no = request.getParameter("pro_no");
		String pro_spec = request.getParameter("pro_spec");
		String pro_unit =Transcode.unescape(request.getParameter("pro_unit"), request);
		String pro_cz = request.getParameter("pro_cz");
		String pt_type = request.getParameter("pt_type");
		Integer madeDep = Integer.parseInt(request.getParameter("madeDep"));
		String pro_reMark= Transcode.unescape(request.getParameter("pro_remark"), request);
		boolean flag=	piManager.updateProductInfo(proID, pro_no, ptID, proName, pPy, pro_spec, pro_cz, pro_unit, pt_type, null, null, null, null, pro_reMark,madeDep);
		String json = JSON.toJSONString(flag);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	//查看指定编号的产品信息
	public ActionForward listProtByOption(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		Integer proId = CommonTools.getFinalInteger(request.getParameter("proId"));
		List<ProductInfo> proInfo=piManager.listProInfo(proId);
		List<ProductInfo> pijson=new ProductInfoJson().getPiJson(proInfo);
		String json = JSON.toJSONString(pijson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 检查是否存在该产品(存在返回true)
	 * @description
	 * @author wm
	 * @date 2017-5-10 上午10:11:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistByName(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String proName = Transcode.unescape(request.getParameter("proName"), request);
		boolean flag = piManager.checkExistByName(proName);
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 检查是否存在该产品(存在返回true)
	 * @description
	 * @author wm
	 * @date 2017-5-10 上午10:11:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward checkExistByCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		String proCode = Transcode.unescape(request.getParameter("proCode"), request);
		boolean flag = piManager.checkExistByCode(proCode);
		Map<String,Boolean> map = new HashMap<String,Boolean>();
		map.put("result", flag);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 获取加工工艺信息
	 */
	public ActionForward listProcessInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		DepartmentInfoManager dManager=(DepartmentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_DEP_INFO);
		List<DepartmentInfo> depList = dManager.listGxDepInfo();
		List<DepartmentInfo> depfojson = new DepartmentInfoJson().getDepInfoJson(depList);
		String json = JSON.toJSONString(depfojson);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}

	/**
	 * 导出到excel
	 * @description
	 * @author wm
	 * @date 2017-7-27 下午04:24:26
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward exportInfoToExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ProductInfoManager	piManager= (ProductInfoManager) AppFactory.instance(null).getApp(Constants.WEB_PRODUCT_INFO);
		List<ProductInfo> proInfo=piManager.listProductInfo(0, "", false,false,1, 100000);
		if(proInfo.size() > 0){
			// 第一步，创建一个webbook，对应一个Excel文件  
	        HSSFWorkbook wb = new HSSFWorkbook();  
	        // 第二步，在webbook中添加一个sheet,对应Excel文件中的sheet  
	        HSSFSheet sheet = wb.createSheet("产品信息统计("+CurrentTime.getStringDate()+"统计)");  
	        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short  
	        HSSFRow row = sheet.createRow(0);  
	        // 第四步，创建单元格，并设置值表头 设置表头居中  
	        HSSFCellStyle style = wb.createCellStyle();  
	        style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式  
	        HSSFCell cell = row.createCell(0);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品名称");  
	        cell = row.createCell(1);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品类别");  
	        cell = row.createCell(2);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("类别类型");
	        cell = row.createCell(3);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("加工工艺");
	        cell = row.createCell(4);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品编码");  
	        cell = row.createCell(5);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品规格");  
	        cell = row.createCell(6);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("基本单位");  
	        cell = row.createCell(7);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("材质要求");  
	        cell = row.createCell(8);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品库存");  
	        cell = row.createCell(9);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品单价（最低）");  
	        cell = row.createCell(10);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品单价（最高）");  
	        cell = row.createCell(11);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品单价（平均）");  
	        cell = row.createCell(12);  
	        cell.setCellStyle(style);  
	        cell.setCellValue("产品备注");  
	        // 第五步，写入实体数据 实际应用中这些数据从数据库得到，
	        for(Integer i = 0 ; i < proInfo.size() ; i++){
	        	ProductInfo pro = proInfo.get(i);
	        	row = sheet.createRow((int) i + 1);
	        	// 第四步，创建单元格，并设置值  
	        	HSSFCell cell_data = row.createCell(0); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProName());
	        	
	        	cell_data = row.createCell(1); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProductTypeInfo().getTypeName());
	        	
	        	cell_data = row.createCell(2); 
	        	cell_data.setCellStyle(style);
	        	String proType2 = pro.getProType2();
	        	if(proType2.equals("b")){
	        		proType2 = "购进";
	        	}else if(proType2.equals("m")){
	        		proType2 = "加工制造";
	        	}
	        	cell_data.setCellValue(proType2);
	        	
	        	cell_data = row.createCell(3); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getDepInfo().getDepName());
	        		        	
	        	cell_data = row.createCell(4); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProNo());
	        		        	
	        	cell_data = row.createCell(5); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProSpec());
	        		        	
	        	cell_data = row.createCell(6); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProUnit());
	        		        	
	        	cell_data = row.createCell(7); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProCz());
	        		        	
	        	cell_data = row.createCell(8); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProValNum());
	        		        	
	        	cell_data = row.createCell(9); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProPriceL());
	        		        	
	        	cell_data = row.createCell(10); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProPriceH());
	        		        	
	        	cell_data = row.createCell(11); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProPriceA());
	        	
	        	cell_data = row.createCell(12); 
	        	cell_data.setCellStyle(style);
	        	cell_data.setCellValue(pro.getProRemark());
	        }
	        // 第六步，将文件存到指定位置
        	String absoFilePath = "";//绝对地址
        	try  {  
            	String fileName = "产品_"+CurrentTime.getStringTime()+".xls";
            	String folder = WebUrl.DATA_URL_PRO + "Module\\excelTemp\\";
            	absoFilePath = folder +fileName;
            	File file = new File(folder);
    			if(!file.exists()){
    				file.mkdirs();
    			}
                FileOutputStream fout = new FileOutputStream(absoFilePath);  
                wb.write(fout);  
                fout.close();  
    	        //第七步 下载文件到客户端
    	        OutputStream fos = null;
    	        BufferedOutputStream bos = null;
    	        InputStream fis = null;
    	        BufferedInputStream bis = null;
    	        fis = new FileInputStream(new File(absoFilePath));
    			bis = new BufferedInputStream(fis);
    			fos = response.getOutputStream();
    			bos = new BufferedOutputStream(fos);
    			fileName = URLEncoder.encode(fileName,"UTF-8");
    			//这个就就是弹出下载对话框的关键代码
    			response.setHeader("Pragma", "No-cache");
    			response.setHeader("Cache-Control", "No-cache");
    			response.setDateHeader("Expires", 0); 
    	        response.setHeader("Content-disposition","attachment;filename=" +fileName);
    	        response.setContentType("application/x-download");
    	        int bytesRead = 0;
    	        byte[] buffer = new byte[8192];
    	        while ((bytesRead = bis.read(buffer,0,8192)) != -1) {
    	        	fos.write(buffer, 0, bytesRead);
    	        }
    	        fos.flush();
    	        fis.close();
    	        bis.close();
    	        fos.close();
    	        bos.close();
            }  
            catch (IOException e){  
                //e.printStackTrace();  
            }
          //第七步 删除临时上传的文件
          FileOpration.deleteFile(absoFilePath);
		}
		return null;
	}
}