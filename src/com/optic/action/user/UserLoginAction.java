/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.optic.action.user;

import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.alibaba.fastjson.JSON;
import com.optic.web.Ability;
import com.optic.tools.CommonTools;
import com.optic.tools.CurrentTime;
import com.optic.factory.AppFactory;
import com.optic.module.DepartmentInfo;
import com.optic.module.UserDepartmentInfo;
import com.optic.module.UserInfo;
import com.optic.module.json.UserDepJson;
import com.optic.service.UserDepartmentInfoManager;
import com.optic.service.UserInfoManager;
import com.optic.util.Constants;
import com.optic.tools.DataBaseSqlVerify;
import com.optic.action.base.Transcode;
import com.optic.tools.MD5;

/** 
 * MyEclipse Struts
 * Creation date: 03-30-2017
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class UserLoginAction extends DispatchAction {
	
	//获取session中的用户ID
	private Integer getUserID(HttpServletRequest request){
        Integer userId = (Integer)request.getSession(false).getAttribute(Constants.LOGIN_USER_ID);
        return userId;
	}
	
	/**
	 * 处理用户登录并获取用户身份（部门）信息
	 * @description
	 * @author wm
	 * @date 2017-3-30 上午11:48:41
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward processLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserInfoManager userManager = (UserInfoManager)AppFactory.instance(null).getApp(Constants.WEB_USER_INFO);
		UserDepartmentInfoManager udim = (UserDepartmentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_DEP_INFO);
		MD5 md5 = new MD5();
		HttpSession session = request.getSession(false);
		String account = Transcode.unescape(request.getParameter("userName"),request);
		String password = md5.calcMD5(Transcode.unescape(request.getParameter("password"),request));
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "";   
		boolean flag = false;
		if(!account.equals("")){
			flag = DataBaseSqlVerify.checkSql(account);
			if(flag){
				msg = "unlaw";//账号含有非法字符
			}else{
				List<UserInfo> uList = userManager.listInfoByAccount(account);
				if(uList.size() > 0){
					if(uList.get(0).getUserStatus().equals("0")){//账号有效
						if(uList.get(0).getUserPassword().equalsIgnoreCase(password)){//成功
							//修改用户登录IP、登录时间、登录次数
							Timestamp curr_login_date = CurrentTime.getCurrentTime1();
							String curr_login_ip = CommonTools.getIpAddress(request);
							Integer userId = uList.get(0).getId();
							String userName = uList.get(0).getUserName();
							Integer loginTimes = uList.get(0).getUserLoginTimes();
							//每次登陆，loginStatus自动加1，满50时恢复0状态
							if(loginTimes < 49){
								loginTimes++;
							}else{
								loginTimes = 0;
							}
							userManager.updateUserInfoById(userId, curr_login_date, curr_login_ip ,loginTimes);
							session.setAttribute(Constants.LOGIN_STATUS, loginTimes);
							session.setAttribute(Constants.LOGIN_USER_ID,userId);
							session.setAttribute(Constants.LOGIN_REAL_NAME,userName);
							session.setAttribute(Constants.LOGIN_ACCOUNT, account);
							//获取用户部门（角色）信息
							List<UserDepartmentInfo> udList = udim.listInfoByUserId(userId);
							List<UserDepartmentInfo> udJson = new UserDepJson().getUserDepJson(udList);
							map.put("udList", udJson);
							msg = "success";//登录成功
						}
					}else{
						msg = "lock";//账号锁定
					}
				}else{
					msg = "error";//账号密码错误
				}
			}
		}
		map.put("result", msg);
		String json = JSON.toJSONString(map);
        PrintWriter pw = response.getWriter();  
        pw.write(json); 
        pw.flush();  
        pw.close(); 
		return null;
	}
	
	/**
	 * 登录成功进入首页界面
	 * @description
	 * @author wm
	 * @date 2017-3-30 上午11:49:02
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		UserDepartmentInfoManager udim = (UserDepartmentInfoManager) AppFactory.instance(null).getApp(Constants.WEB_USER_DEP_INFO);
		Integer depId = CommonTools.getFinalInteger(String.valueOf(request.getParameter("depId")));//用户部门编号
		String depName = Transcode.unescape(request.getParameter("depName"),request);//用户部门名称
		boolean flag = false;
		//增加判断，确认该用户有当前身份才能进入
		List<UserDepartmentInfo> udList = udim.listInfoByUserId(this.getUserID(request));
		for(Iterator<UserDepartmentInfo> it = udList.iterator() ; it.hasNext() ;){
			UserDepartmentInfo ud = it.next();
			DepartmentInfo dep = ud.getDepartmentInfo();
			if(depId.equals(dep.getId()) && depName.equals(dep.getDepName())){
				flag = true;
				break;
			}
		}
		if(flag){
			request.getSession(false).setAttribute(Constants.LOGIN_USER_DEP_ID, depId);
			request.getSession(false).setAttribute(Constants.LOGIN_USER_DEP_NAME, depName);
			return mapping.findForward("welcome");
		}else{
			HttpSession session = request.getSession(false);
			session.invalidate();
			String url = "window.top.location.href='login.do?action=loginOut'";
			String authorizeScript = "登陆异常，系统已强制您下线，请重新登录！";
			Ability.PrintAuthorizeScript(url,authorizeScript, response);
			return null;
		}
	}
	
	/**
	 * 处理登录情况
	 * @description
	 * @author wm
	 * @date 2017-4-1 上午11:51:44
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward loginOut(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		request.getSession(false).invalidate();
		return mapping.findForward("loginOut");
	}
}